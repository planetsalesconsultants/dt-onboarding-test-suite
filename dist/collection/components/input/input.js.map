{"version":3,"file":"input.js","sourceRoot":"","sources":["../../../src/components/input/input.tsx"],"names":[],"mappings":"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AAG,CACd,CACH,CACM,CACf,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Element, Prop, Watch, Event, EventEmitter, State, Method } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { AutocompleteTypes, TextFieldTypes } from '../../interface';\nimport { hasSlot } from '../../utils/slot';\nimport { debounceEvent, inheritAttributes, renderHiddenInput } from '../../utils/helpers';\n\nlet id = 0;\n\n/**\n * @slot label - The input's label. Alternatively, you can use the label prop.\n * @slot help-text - Help text that describes how to use the input.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n * @slot start - Used to prepend an icon or similar element to the input.\n * @slot end - Used to append an icon or similar element to the input.\n */\n@Component({\n  tag: 'gr-input',\n  styleUrl: 'input.scss',\n  shadow: true,\n})\nexport class Input {\n  private input: HTMLInputElement;\n  private inputId = `input-${++id}`;\n  private labelId = `input-label-${id}`;\n  private helpTextId = `input-help-text-${id}`;\n  private invalidTextId = `input-invalid-text-${id}`;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el!: HTMLGrInputElement;\n\n  @State() hasFocus = false;\n  @State() hasHelpTextSlot = false;\n  @State() hasInvalidTextSlot = false;\n  @State() hasLabelSlot = false;\n  @State() isPasswordVisible = false;\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value: string = '';\n\n  /** The type of control to display. The default type is text. */\n  @Prop({ reflect: true }) type: TextFieldTypes = 'text';\n\n  /** Set to true to draw a pill-style input with rounded edges. */\n  @Prop() pill = false;\n\n  /** Set to true to disable the input control. */\n  @Prop() disabled = false;\n\n  /** The input's name. */\n  @Prop({ reflect: true }) name = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder = '';\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The inputs's label. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Set to true to display a required indicator, adds an asterisk to label */\n  @Prop() requiredIndicator = false;\n\n  /** The input's help text. Alternatively, you can use the help-text slot. */\n  @Prop() helpText = '';\n\n  /** The input's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text instead of the help text */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** Set to true to add a clear button when the input is populated. */\n  @Prop() clearable = false;\n\n  /** The input's inputmode attribute. */\n  @Prop() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  /** If `true`, the user cannot modify the value. */\n  @Prop({ reflect: true }) readonly = false;\n\n  /** Specifies how many characters are allowed. */\n  @Prop() maxlength: number;\n\n  /** If `true`, the element will have its spelling and grammar checked. */\n  @Prop() spellcheck = false;\n\n  /**\n   * The minimum value, which must not be greater than its maximum (max attribute) value.\n   */\n  @Prop() min?: string;\n\n  /**\n   * The maximum value, which must not be less than its minimum (min attribute) value.\n   */\n  @Prop() max?: string;\n\n  /**\n   * Works with the min and max attributes to limit the increments at which a value can be set.\n   * Possible values are: `\"any\"` or a positive floating point number.\n   */\n  @Prop() step?: string;\n\n  /**\n   * Specifies a regular expression that the input value is checked against.\n   */\n  @Prop() pattern?: string;\n\n  /**\n   * A hint to the browser for which enter key to display.\n   * Possible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n   * `\"previous\"`, `\"search\"`, and `\"send\"`.\n   */\n  @Prop() enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n  /**\n   * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n   * Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.\n   */\n  @Prop() autocapitalize = 'off';\n\n  /**\n   * Indicates whether the value of the control can be automatically completed by the browser.\n   */\n  @Prop() autocomplete: AutocompleteTypes = 'off';\n\n  /**\n   * Whether auto correction should be enabled when the user is entering/editing the text value.\n   */\n  @Prop() autocorrect: 'on' | 'off' = 'off';\n\n  /**\n   * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n   */\n  @Prop() autofocus = false;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n   */\n  @Prop() debounce = 0;\n\n  /**\n   * Set to true to add a password toggle button for password inputs.\n   */\n  @Prop() togglePassword = false;\n\n  /**\n   * Set to true to hide input appearances.\n   */\n  @Prop() hideAppearance = true;\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.grChange = debounceEvent(this.grChange, this.debounce);\n  }\n\n  @Watch('helpText')\n  @Watch('invalidText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    this.grChange.emit();\n  }\n\n  /** Emitted when the control's value changes. */\n  @Event({ eventName: 'gr-change' }) grChange: EventEmitter<void>;\n\n  /** Emitted when the clear button is activated. */\n  @Event({ eventName: 'gr-clear' }) grClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event({ eventName: 'gr-input' }) grInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur: EventEmitter<void>;\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleLabelClick = this.handleLabelClick.bind(this);\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n    this.handleClearClick = this.handleClearClick.bind(this);\n    this.handlePasswordToggle = this.handlePasswordToggle.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n\n    this.debounceChanged();\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label', 'tabindex', 'title']);\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  /** Sets focus on the input. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the input. */\n  @Method()\n  async removeFocus() {\n    this.input.blur();\n  }\n\n  /** Selects all the text in the input. */\n  @Method()\n  async select() {\n    return this.input.select();\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  @Method()\n  async setSelectionRange(\n    selectionStart: number,\n    selectionEnd: number,\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none',\n  ) {\n    return this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  @Method()\n  async setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve',\n  ) {\n    this.input.setRangeText(replacement, start, end, selectMode);\n\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.grChange.emit();\n      this.grInput.emit();\n    }\n  }\n\n  handleChange() {\n    this.value = this.input.value;\n    this.grChange.emit();\n  }\n\n  handleInput() {\n    this.value = this.input.value;\n    this.grInput.emit();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  handleClearClick(event: MouseEvent) {\n    this.value = '';\n    this.grClear.emit();\n    this.grInput.emit();\n    this.grChange.emit();\n    this.input.focus();\n\n    event.stopPropagation();\n  }\n\n  handleLabelClick() {\n    this.input.focus();\n  }\n\n  handleSlotChange() {\n    this.hasHelpTextSlot = hasSlot(this.el, 'help-text');\n    this.hasLabelSlot = hasSlot(this.el, 'label');\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  handlePasswordToggle() {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.value, this.disabled);\n\n    return (\n      <FormControl\n        inputId={this.inputId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        helpTextId={this.helpTextId}\n        helpText={this.helpText}\n        hasHelpTextSlot={this.hasHelpTextSlot}\n        invalidTextId={this.invalidTextId}\n        invalidText={this.invalidText}\n        invalid={this.invalid}\n        hasInvalidTextSlot={this.hasInvalidTextSlot}\n        size={this.size}\n        onLabelClick={this.handleLabelClick}\n        requiredIndicator={this.requiredIndicator}\n      >\n        <div\n          class={{\n            'input': true,\n            'input-pill': this.pill,\n            'input-disabled': this.disabled,\n            'input-invalid': this.invalid,\n            'input-focused': this.hasFocus,\n            'input-empty': this.value?.length === 0,\n            [`input-${this.size}`]: true,\n          }}\n        >\n          <span class=\"start\">\n            <slot name=\"start\" />\n          </span>\n\n          <input\n            ref={el => (this.input = el)}\n            id={this.name}\n            name={this.name}\n            type={this.type === 'password' && this.isPasswordVisible ? 'text' : this.type}\n            placeholder={this.placeholder}\n            disabled={this.disabled}\n            readonly={this.readonly}\n            autoCorrect={this.autocorrect}\n            autoFocus={this.autofocus}\n            enterKeyHint={this.enterkeyhint}\n            inputMode={this.inputmode}\n            min={this.min}\n            max={this.max}\n            step={this.step}\n            pattern={this.pattern}\n            value={this.value}\n            maxlength={this.maxlength}\n            autoCapitalize={this.autocapitalize}\n            autoComplete={this.autocomplete}\n            spellcheck={this.spellcheck}\n            aria-labelledby={this.labelId}\n            aria-describedby={this.invalid ? this.invalidTextId : this.helpTextId}\n            aria-invalid={this.invalid ? 'true' : 'false'}\n            aria-required={this.requiredIndicator ? 'true' : 'false'}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            class={{ 'input-control': true, 'input-hide-appearance': this.hideAppearance }}\n            {...this.inheritedAttributes}\n          />\n\n          {this.clearable && (\n            <button class=\"input-clear\" type=\"button\" onClick={this.handleClearClick} tabindex=\"-1\">\n              <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                <title>Close Circle</title>\n                <path\n                  d=\"M448 256c0-106-86-192-192-192S64 150 64 256s86 192 192 192 192-86 192-192z\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-miterlimit=\"10\"\n                  stroke-width=\"32\"\n                />\n                <path\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\"\n                  stroke-width=\"32\"\n                  d=\"M320 320L192 192M192 320l128-128\"\n                />\n              </svg>\n            </button>\n          )}\n\n          {this.togglePassword && (\n            <button class=\"input-password-toggle\" type=\"button\" onClick={this.handlePasswordToggle} tabindex=\"-1\">\n              {this.isPasswordVisible ? (\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\" fill=\"currentColor\">\n                  <title>Eye Off</title>\n                  <path d=\"M432 448a15.92 15.92 0 01-11.31-4.69l-352-352a16 16 0 0122.62-22.62l352 352A16 16 0 01432 448zM255.66 384c-41.49 0-81.5-12.28-118.92-36.5-34.07-22-64.74-53.51-88.7-91v-.08c19.94-28.57 41.78-52.73 65.24-72.21a2 2 0 00.14-2.94L93.5 161.38a2 2 0 00-2.71-.12c-24.92 21-48.05 46.76-69.08 76.92a31.92 31.92 0 00-.64 35.54c26.41 41.33 60.4 76.14 98.28 100.65C162 402 207.9 416 255.66 416a239.13 239.13 0 0075.8-12.58 2 2 0 00.77-3.31l-21.58-21.58a4 4 0 00-3.83-1 204.8 204.8 0 01-51.16 6.47zM490.84 238.6c-26.46-40.92-60.79-75.68-99.27-100.53C349 110.55 302 96 255.66 96a227.34 227.34 0 00-74.89 12.83 2 2 0 00-.75 3.31l21.55 21.55a4 4 0 003.88 1 192.82 192.82 0 0150.21-6.69c40.69 0 80.58 12.43 118.55 37 34.71 22.4 65.74 53.88 89.76 91a.13.13 0 010 .16 310.72 310.72 0 01-64.12 72.73 2 2 0 00-.15 2.95l19.9 19.89a2 2 0 002.7.13 343.49 343.49 0 0068.64-78.48 32.2 32.2 0 00-.1-34.78z\" />\n                  <path d=\"M256 160a95.88 95.88 0 00-21.37 2.4 2 2 0 00-1 3.38l112.59 112.56a2 2 0 003.38-1A96 96 0 00256 160zM165.78 233.66a2 2 0 00-3.38 1 96 96 0 00115 115 2 2 0 001-3.38z\" />\n                </svg>\n              ) : (\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                  <title>Eye</title>\n                  <path\n                    d=\"M255.66 112c-77.94 0-157.89 45.11-220.83 135.33a16 16 0 00-.27 17.77C82.92 340.8 161.8 400 255.66 400c92.84 0 173.34-59.38 221.79-135.25a16.14 16.14 0 000-17.47C428.89 172.28 347.8 112 255.66 112z\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    stroke-width=\"32\"\n                  />\n                  <circle\n                    cx=\"256\"\n                    cy=\"256\"\n                    r=\"80\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-miterlimit=\"10\"\n                    stroke-width=\"32\"\n                  />\n                </svg>\n              )}\n            </button>\n          )}\n\n          <span class=\"end\">\n            <slot name=\"end\" />\n          </span>\n        </div>\n      </FormControl>\n    );\n  }\n}\n"]}