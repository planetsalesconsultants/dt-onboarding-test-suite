.form-control .form-control-label {
  display: none;
}
.form-control .form-control-help-text {
  display: none;
}
.form-control .form-control-invalid-text {
  display: none;
}

.form-control-has-label .form-control-label {
  display: flex;
  line-height: var(--gr-line-height-normal);
  color: var(--gr-form-element-label-color);
  margin-bottom: var(--gr-spacing-xxx-small);
}
.form-control-has-label.form-control-small .form-control-label {
  font-size: var(--gr-form-element-label-font-size-small);
}
.form-control-has-label.form-control-medium .form-control-label {
  font-size: var(--gr-form-element-label-font-size-medium);
}
.form-control-has-label.form-control-large .form-control-label {
  font-size: var(--gr-form-element-label-font-size-large);
}
.form-control-has-label .form-control-label .asterisk {
  margin-left: var(--gr-spacing-x-small);
  color: var(--gr-color-medium);
}
.form-control-has-label .form-control-label .asterisk svg {
  width: 0.6em;
  height: 0.6em;
  margin-bottom: var(--gr-spacing-xxx-small);
}

.form-control-has-help-text .form-control-help-text {
  display: block;
  line-height: var(--gr-line-height-normal);
  color: var(--gr-form-element-help-text-color);
  margin-top: var(--gr-spacing-xxx-small);
}
.form-control-has-help-text.form-control-small .form-control-help-text {
  font-size: var(--gr-form-element-help-text-font-size-small);
  min-height: 1.625rem;
}
.form-control-has-help-text.form-control-medium .form-control-help-text {
  font-size: var(--gr-form-element-help-text-font-size-medium);
  min-height: 1.875rem;
}
.form-control-has-help-text.form-control-large .form-control-help-text {
  font-size: var(--gr-form-element-help-text-font-size-large);
  min-height: 2.125rem;
}

.form-control-has-invalid-text .form-control-invalid-text {
  display: flex;
  margin-left: -2px;
  line-height: var(--gr-line-height-normal);
  color: var(--gr-form-element-invalid-text-color);
  margin-top: var(--gr-spacing-xxx-small);
}
.form-control-has-invalid-text .form-control-invalid-text .icon {
  margin-top: var(--gr-spacing-xxx-small);
  margin-right: var(--gr-spacing-xx-small);
}
.form-control-has-invalid-text .form-control-invalid-text .icon svg {
  width: 1.4em;
  height: 1.4em;
}
.form-control-has-invalid-text.form-control-small .form-control-invalid-text {
  font-size: var(--gr-form-element-invalid-text-font-size-small);
  min-height: 1.625rem;
}
.form-control-has-invalid-text.form-control-medium .form-control-invalid-text {
  font-size: var(--gr-form-element-invalid-text-font-size-medium);
  min-height: 1.875rem;
}
.form-control-has-invalid-text.form-control-large .form-control-invalid-text {
  font-size: var(--gr-form-element-invalid-text-font-size-large);
  min-height: 2.125rem;
}

.gr-scroll-lock {
  overflow: hidden !important;
}

:host {
  /**
   * @prop --font-size: Font size of the input
   * @prop --font-weight: Font weight of the input
   *
   * @prop --background-color: Background color of the input
   * @prop --background-color-hover: Background color of the input on hover
   * @prop --background-color-focus: Background color of the input on focus
   * @prop --background-color-invalid: Background color of the input when invalid
   * @prop --background-color-invalid-hover: Background color of the input when invalid on focus
   *
   * @prop --border-radius: Border radius of the input
   * @prop --border-color: Border color of the input
   * @prop --border-color-hover: Border color of the input on hover
   * @prop --border-color-focus: Border color of the input on focus
   * @prop --border-color-invalid: Border color of the input when invalid
   * @prop --border-color-invalid-hover: Border color of the input when invalid on focus
   *
   * @prop --color: Text color of the input
   *
   * @prop --placeholder-color: Text color of the placeholder
   *
   * @prop --min-height: Minimum height of the input
   *
   * @prop --icon-color: Color of the icons (start & end slots, clearable & password toggle)
   * @prop --icon-color-hover: Color of the icons (clearable & password toggle) on hover
   *
   * @prop --padding-start: Left padding of the input (will be right padding when we support right-to-left direction)
   * @prop --padding-end: Right padding of the input (will be left padding when we support right-to-left direction)
   *
   * @prop --focus-ring: The focus ring style to use when the input receives focus, a `box-shadow` property.
   *
   * @prop --text-transform: Text transform of the input
   */
  --font-size: var(--gr-form-element-font-size-medium);
  --font-weight: var(--gr-font-weight-normal);
  --background-color: var(--gr-color-white);
  --background-color-hover: var(--gr-color-white);
  --background-color-focus: var(--gr-color-white);
  --background-color-invalid: var(--gr-color-white);
  --background-color-invalid-hover: var(--gr-color-white);
  --border-radius: var(--gr-form-element-border-radius-small);
  --border-color: var(--gr-color-light-shade);
  --border-color-hover: var(--gr-color-medium);
  --border-color-focus: var(--gr-color-primary);
  --border-color-invalid: var(--gr-color-danger);
  --border-color-invalid-hover: var(--gr-color-danger-shade);
  --color: var(--gr-color-dark-tint);
  --placeholder-color: var(--gr-color-medium-tint);
  --min-height: var(--gr-form-element-height-medium);
  --icon-color: var(--gr-color-medium);
  --icon-color-hover: var(--gr-color-dark);
  --padding-start: var(--gr-spacing-medium);
  --padding-end: var(--gr-spacing-medium);
  --focus-ring: 0 0 0 var(--gr-focus-ring-width) rgb(var(--gr-color-primary-rgb), 0.33);
  --text-transform: none;
  display: block;
  box-sizing: border-box;
}
:host *, :host *:before, :host *:after {
  box-sizing: inherit;
}

.input-small {
  --font-size: var(--gr-form-element-font-size-small);
  --min-height: var(--gr-form-element-height-small);
  --padding-start: var(--gr-spacing-small);
  --padding-end: var(--gr-spacing-small);
}

.input-large {
  --font-size: var(--gr-form-element-font-size-large);
  --min-height: var(--gr-form-element-height-large);
  --padding-start: var(--gr-spacing-large);
  --padding-end: var(--gr-spacing-large);
}

.input {
  flex: 1 1 auto;
  display: inline-flex;
  align-items: stretch;
  justify-content: start;
  position: relative;
  width: 100%;
  height: var(--min-height);
  font-family: var(--gr-font-family);
  font-size: var(--font-size);
  font-weight: var(--font-weight);
  line-height: var(--gr-line-height-normal);
  letter-spacing: var(--gr-letter-spacing-normal);
  background-color: var(--background-color);
  border: solid 1px var(--border-color);
  border-radius: var(--border-radius);
  vertical-align: middle;
  overflow: hidden;
  transition: 150ms color, 150ms border, 150ms box-shadow;
  cursor: text;
}
.input.input-invalid:not(.input-disabled) {
  background-color: var(--background-color-invalid);
  border-color: var(--border-color-invalid);
}
.input:hover.input-invalid:not(.input-disabled):not(.input-focused) {
  background-color: var(--background-color-invalid-hover);
  border-color: var(--border-color-invalid-hover);
}
.input.input-invalid:not(.input-disabled) {
  background-color: var(--background-color-invalid);
  border-color: var(--border-color-invalid);
}
.input:hover:not(.input-disabled) {
  background-color: var(--background-color-hover);
  border-color: var(--border-color-hover);
}
.input.input-focused:not(.input-disabled) {
  outline: none;
  box-shadow: var(--focus-ring);
  border-color: var(--border-color-focus);
  background-color: var(--background-color-focus);
}
.input.input-disabled {
  cursor: not-allowed;
  opacity: 0.5;
  outline: none;
}

.input-control {
  flex: 1 1 auto;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  min-width: 0;
  height: 100%;
  color: var(--color);
  text-transform: var(--text-transform);
  border: none;
  background: none;
  box-shadow: none;
  padding: 0;
  margin: 0;
  cursor: inherit;
  padding-top: 0;
  padding-left: var(--padding-start);
  padding-right: var(--padding-end);
  padding-bottom: 0;
}
.input-control::-webkit-search-decoration, .input-control::-webkit-search-cancel-button, .input-control::-webkit-search-results-button, .input-control::-webkit-search-results-decoration {
  -webkit-appearance: none;
}
.input-control:-webkit-autofill, .input-control:-webkit-autofill:hover, .input-control:-webkit-autofill:focus, .input-control:-webkit-autofill:active {
  box-shadow: 0 0 0 var(--min-height) var(--background-color-hover) inset !important;
  -webkit-text-fill-color: var(--gr-color-primary);
}
.input-control::placeholder {
  color: var(--placeholder-color);
  user-select: none;
}
.input-control:focus {
  outline: none;
}

.input-hide-appearance {
  /* Chrome, Safari, Edge, Opera */
  appearance: none;
  -webkit-appearance: none;
  margin: 0;
  /* Firefox */
  -moz-appearance: textfield;
}
.input-hide-appearance::-webkit-inner-spin-button, .input-hide-appearance::-webkit-outer-spin-button {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: textfield;
}

.input-pill {
  border-radius: var(--min-height);
}

.start {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  cursor: default;
}
.start ::slotted(*) {
  margin-left: var(--padding-start);
  color: var(--icon-color);
}

.end {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  cursor: default;
}
.end ::slotted(*) {
  margin-right: var(--padding-end);
  color: var(--icon-color);
}

.input-clear,
.input-password-toggle {
  display: inline-flex;
  align-items: center;
  font-size: inherit;
  color: var(--icon-color);
  border: none;
  background: none;
  padding: 0;
  transition: 150ms color;
  cursor: pointer;
  margin-right: var(--padding-end);
}
.input-clear:hover,
.input-password-toggle:hover {
  color: var(--icon-color-hover);
}
.input-clear:focus,
.input-password-toggle:focus {
  outline: none;
}
.input-clear svg,
.input-password-toggle svg {
  width: 1.2em;
  height: 1.2em;
  font-size: var(--font-size);
}

/* Don't show the browser's password toggle in Edge */
::-ms-reveal {
  display: none;
}

.input-empty .input-clear {
  visibility: hidden;
}