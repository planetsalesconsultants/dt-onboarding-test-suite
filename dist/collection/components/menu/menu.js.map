{"version":3,"file":"menu.js","sourceRoot":"","sources":["../../../src/components/menu/menu.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Event, EventEmitter, Method } from '@stencil/core';\nimport { getTextContent } from '../../utils/slot';\n\n/**\n * @slot - The menu's content, including menu items, menu dividers, and menu labels.\n */\n@Component({\n  tag: 'gr-menu',\n  styleUrl: 'menu.scss',\n  shadow: true,\n})\nexport class Menu {\n  private typeToSelectString = '';\n  private typeToSelectTimeout: any;\n\n  private menu: HTMLElement;\n\n  /** Emitted when a menu item is selected. */\n  @Event({ eventName: 'gr-select' }) grSelect: EventEmitter<{ item: HTMLGrMenuItemElement }>;\n\n  connectedCallback() {\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  /**\n   * Initiates type-to-select logic, which automatically selects an option based on what the user is currently typing.\n   * The key passed will be appended to the internal query and the selection will be updated. After a brief period, the\n   * internal query is cleared automatically. This method is intended to be used with the keydown event. Useful for\n   * enabling type-to-select when the menu doesn't have focus.\n   */\n  @Method()\n  async typeToSelect(key: string) {\n    clearTimeout(this.typeToSelectTimeout);\n    this.typeToSelectTimeout = setTimeout(() => (this.typeToSelectString = ''), 750);\n    this.typeToSelectString += key.toLowerCase();\n    const items = this.getItems();\n    for (const item of items) {\n      const slot = item.shadowRoot.querySelector('slot:not([name])') as HTMLSlotElement;\n      const label = getTextContent(slot).toLowerCase().trim();\n      if (label.substring(0, this.typeToSelectString.length) === this.typeToSelectString) {\n        item.setFocus();\n        break;\n      }\n    }\n  }\n\n  getItems() {\n    const slot = this.menu.querySelector('slot');\n    return [...slot.assignedElements({ flatten: true })].filter(\n      (el: any) => el.tagName.toLowerCase() === 'gr-menu-item' && !el.disabled,\n    ) as [HTMLGrMenuItemElement];\n  }\n\n  getActiveItem() {\n    return this.getItems().find(i => i === document.activeElement);\n  }\n\n  setActiveItem(item: HTMLGrMenuItemElement) {\n    item.setFocus();\n  }\n\n  handleClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    const item = target.closest('gr-menu-item');\n\n    if (item && !item.disabled) {\n      this.grSelect.emit({ item });\n    }\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    // Make a selection when pressing enter\n    if (event.key === 'Enter') {\n      const item = this.getActiveItem();\n      event.preventDefault();\n\n      if (item) {\n        this.grSelect.emit({ item });\n      }\n    }\n\n    // Prevent scrolling when space is pressed\n    if (event.key === ' ') {\n      event.preventDefault();\n    }\n\n    // Move the selection when pressing down or up\n    if (['ArrowDown', 'ArrowUp', 'Home', 'End'].includes(event.key)) {\n      const items = this.getItems();\n      const selectedItem = this.getActiveItem();\n      let index = items.indexOf(selectedItem);\n\n      if (items.length) {\n        event.preventDefault();\n\n        if (event.key === 'ArrowDown') {\n          index++;\n        } else if (event.key === 'ArrowUp') {\n          index--;\n        } else if (event.key === 'Home') {\n          index = 0;\n        } else if (event.key === 'End') {\n          index = items.length - 1;\n        }\n\n        if (index < 0) index = 0;\n        if (index > items.length - 1) index = items.length - 1;\n\n        this.setActiveItem(items[index]);\n\n        return;\n      }\n    }\n\n    this.typeToSelect(event.key);\n  }\n\n  render() {\n    return (\n      <div\n        ref={el => (this.menu = el)}\n        class=\"menu\"\n        role=\"menu\"\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n      >\n        <slot></slot>\n      </div>\n    );\n  }\n}\n"]}