{"version":3,"file":"checkbox.js","sourceRoot":"","sources":["../../../src/components/checkbox/checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Host, h, Element, State, Prop, Event, EventEmitter, Method, Watch } from '@stencil/core';\nimport { inheritAttributes, renderHiddenInput } from '../../utils/helpers';\nimport { hasSlot } from '../../utils/slot';\n\nlet id = 0;\n\n/**\n * @slot - The checkboxes label.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n */\n@Component({\n  tag: 'gr-checkbox',\n  styleUrl: 'checkbox.scss',\n  shadow: true,\n})\nexport class Checkbox {\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n  private invalidTextId = `checkbox-invalid-text-${id}`;\n  private input: HTMLInputElement;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el: HTMLGrCheckboxElement;\n\n  @State() hasInvalidTextSlot = false;\n\n  @State() hasFocus = false;\n\n  /**\n   * The checkbox's value attribute.\n   */\n  @Prop() value: string;\n\n  /**\n   * Set to true to disable the checkbox.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name: string = this.inputId;\n\n  /** Set to true to draw the checkbox in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** Set to true to draw the checkbox in an indeterminate state. */\n  @Prop({ mutable: true, reflect: true }) indeterminate = false;\n\n  /** The radio group's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text. */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** The checkbox's alignment. */\n  @Prop({ reflect: true }) alignment: 'top' | 'center' | 'bottom' = 'center';\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event({ eventName: 'gr-change' }) grChange: EventEmitter<void>;\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleCheckedChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.grChange.emit();\n  }\n\n  @Watch('invalidText')\n  handleInvalidTextChange() {\n    this.handleSlotChange();\n  }\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  componentDidLoad() {\n    this.input.indeterminate = this.indeterminate;\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async removeFocus() {\n    this.input.blur();\n  }\n\n  handleClick() {\n    this.checked = this.input.checked;\n    this.indeterminate = false;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  handleMouseDown(event: MouseEvent) {\n    // Prevent clicks on the label from briefly blurring the input\n    event.preventDefault();\n    this.input.focus();\n  }\n\n  handleSlotChange() {\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.checked ? this.value : '', this.disabled);\n\n    const hasInvalidText = this.invalidText ? true : this.hasInvalidTextSlot;\n    const showInvalidText = this.invalid ? true : false;\n\n    const ariaLabelAttributes = this.inheritedAttributes['aria-label']\n      ? { 'aria-label': this.inheritedAttributes['aria-label'] }\n      : { 'aria-labelledby': this.labelId };\n\n    return (\n      <Host\n        class={{\n          'checkbox-disabled': this.disabled,\n          'checkbox-has-invalid-text': hasInvalidText,\n        }}\n      >\n        <label\n          class={{\n            'checkbox': true,\n            'checkbox-checked': this.checked,\n            'checkbox-invalid': this.invalid,\n            'checkbox-disabled': this.disabled,\n            'checkbox-focused': this.hasFocus,\n            'checkbox-indeterminate': this.indeterminate,\n            [`checkbox-${this.alignment}`]: true,\n          }}\n          htmlFor={this.inputId}\n          onMouseDown={this.handleMouseDown}\n        >\n          <span class=\"checkbox-control\">\n            {this.checked && (\n              <span class=\"checkbox-icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(3.428571, 3.428571)\">\n                        <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                        <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            {!this.checked && this.indeterminate && (\n              <span class=\"checkbox-icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(2.285714, 6.857143)\">\n                        <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            <input\n              ref={el => (this.input = el)}\n              id={this.inputId}\n              type=\"checkbox\"\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              role=\"checkbox\"\n              aria-invalid={this.invalid}\n              aria-checked={this.checked ? 'true' : 'false'}\n              {...ariaLabelAttributes}\n              aria-describedby={this.invalid ? this.invalidTextId : ''}\n              onClick={this.handleClick}\n              onBlur={this.handleBlur}\n              onFocus={this.handleFocus}\n            />\n          </span>\n\n          <span id={this.labelId} class=\"checkbox-label\">\n            <slot></slot>\n          </span>\n        </label>\n        {showInvalidText && (\n          <div id={this.invalidTextId} class=\"checkbox-invalid-text\" aria-hidden={hasInvalidText ? 'false' : 'true'}>\n            <div class=\"icon\">\n              <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                <title>Alert Circle</title>\n                <path\n                  d=\"M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48Zm0,319.91a20,20,0,1,1,20-20A20,20,0,0,1,256,367.91Zm21.72-201.15-5.74,122a16,16,0,0,1-32,0l-5.74-121.94v-.05a21.74,21.74,0,1,1,43.44,0Z\"\n                  fill=\"currentColor\"\n                />\n              </svg>\n            </div>\n            <div class=\"text\">\n              <slot name=\"invalid-text\">{this.invalidText}</slot>\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n"]}