{"version":3,"sources":["src/components/checkbox/checkbox.scss?tag=gr-checkbox&encapsulation=shadow","src/components/checkbox/checkbox.tsx","src/components/field-group/field-group.scss?tag=gr-field-group&encapsulation=shadow","src/components/field-group/field-group.tsx"],"names":["checkboxCss","id","Checkbox","this","inputId","labelId","invalidTextId","inheritedAttributes","[object Object]","input","checked","indeterminate","grChange","emit","handleSlotChange","handleBlur","bind","handleFocus","handleClick","handleMouseDown","el","shadowRoot","addEventListener","inheritAttributes","removeEventListener","options","focus","blur","hasFocus","grBlur","grFocus","event","preventDefault","hasInvalidTextSlot","hasSlot","renderHiddenInput","name","value","disabled","hasInvalidText","invalidText","showInvalidText","invalid","ariaLabelAttributes","aria-label","aria-labelledby","h","Host","class","checkbox-disabled","checkbox-has-invalid-text","checkbox","checkbox-checked","checkbox-invalid","checkbox-focused","checkbox-indeterminate","alignment","htmlFor","onMouseDown","role","aria-hidden","viewBox","stroke","stroke-width","fill","fill-rule","stroke-linecap","transform","d","Object","assign","ref","type","aria-invalid","aria-checked","aria-describedby","onClick","onBlur","onFocus","fieldGroupCss","FieldGroup","hasLabelSlot","hasLabel","label","field-group","field-group-horizontal","horizontal","field-group-has-label"],"mappings":"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","sourcesContent":["@import '../../themes/graphite.globals';\n\n// Checkbox\n// --------------------------------------------------\n\n:host {\n  /**\n   * @prop --label-color: Color of the label\n   *\n   * @prop --control-size: Size of the control\n   *\n   * @prop --control-border-color: Border color of the control\n   * @prop --control-background-color: Background color of the control\n   *\n   * @prop --control-border-color-hover: Border color of the control on hover\n   * @prop --control-background-color-hover: Background color of the control on hover\n   *\n   * @prop --control-color-checked: Color of the control when checked (the checkmark icon)\n   * @prop --control-border-color-checked: Border color of the control when checked\n   * @prop --control-background-color-checked: Background color of the control when checked\n   *\n   * @prop --control-border-color-checked-hover: Border color of the control when checked on hover\n   * @prop --control-background-color-checked-hover: Background color of the control when checked on hover\n   *\n   * @prop --control-border-color-checked-focus: Border color of the control when checked on focus\n   * @prop --control-background-color-checked-focus: Background color of the control when checked on focus\n   *\n   * @prop --focus-ring: The focus ring style to use when the checkbox receives focus, a `box-shadow` property.\n   */\n\n  --label-color: var(--gr-color-dark-tint);\n  --label-margin-top-adjustment: -7px;\n  --label-margin-bottom-adjustment: -4px;\n\n  --control-size: var(--gr-toggle-size);\n\n  --control-border-color: var(--gr-color-light-shade);\n  --control-background-color: var(--gr-color-white);\n\n  --control-border-color-hover: var(--gr-color-medium);\n  --control-background-color-hover: var(--gr-color-white);\n\n  --control-color-checked: var(--gr-color-primary-contrast);\n  --control-border-color-checked: var(--gr-color-primary);\n  --control-background-color-checked: var(--gr-color-primary);\n\n  --control-border-color-checked-hover: var(--gr-color-primary-shade);\n  --control-background-color-checked-hover: var(--gr-color-primary-shade);\n\n  --control-border-color-checked-focus: var(--gr-color-primary-shade);\n  --control-background-color-checked-focus: var(--gr-color-primary-shade);\n\n  --focus-ring: 0 0 0 var(--gr-focus-ring-width) rgb(var(--gr-color-primary-rgb), 0.33);\n\n  display: inline-block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n:host(.checkbox-disabled) {\n  pointer-events: none;\n}\n\n// Alignment modifiers\n// --------------------------------------------------\n.checkbox-top {\n  align-items: flex-start;\n}\n\n.checkbox-center {\n  align-items: center;\n}\n\n.checkbox-bottom {\n  align-items: flex-end;\n}\n\n.checkbox {\n  display: inline-flex;\n  font-family: var(--gr-font-family);\n  font-size: var(--gr-form-element-font-size-medium);\n  font-weight: var(--gr-font-weight-normal);\n  color: var(--label-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.checkbox-icon {\n  display: inline-flex;\n  width: var(--control-size);\n  height: var(--control-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.checkbox-control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--control-size);\n  height: var(--control-size);\n  border: solid 1px var(--control-border-color);\n  border-radius: var(--gr-form-element-border-radius-small);\n  background-color: var(--control-background-color);\n  color: transparent;\n  transition: 150ms border-color, 150ms background-color, 150ms color, 150ms box-shadow;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n.checkbox-control-circle {\n  border-radius: var(--border-radius-circle);\n}\n\n// Hover\n.checkbox:not(.checkbox-checked):not(.checkbox-disabled) .checkbox-control:hover {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n}\n\n// Focus\n.checkbox.checkbox-focused:not(.checkbox-checked):not(.checkbox-disabled) .checkbox-control {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n  box-shadow: var(--focus-ring);\n}\n\n// Checked/indeterminate\n.checkbox-checked .checkbox-control,\n.checkbox-indeterminate .checkbox-control {\n  color: var(--control-color-checked);\n  border-color: var(--control-border-color-checked);\n  background-color: var(--control-background-color-checked);\n}\n\n// Checked/indeterminate + hover\n.checkbox.checkbox-checked:not(.checkbox-disabled) .checkbox-control:hover,\n.checkbox.checkbox-indeterminate:not(.checkbox-disabled) .checkbox-control:hover {\n  border-color: var(--control-border-color-checked-hover);\n  background-color: var(--control-background-color-checked-hover);\n}\n\n// Checked/indeterminate + focus\n.checkbox.checkbox-checked:not(.checkbox-disabled).checkbox-focused .checkbox-control,\n.checkbox.checkbox-indeterminate:not(.checkbox-disabled).checkbox-focused .checkbox-control {\n  border-color: var(--control-border-color-checked-focus);\n  background-color: var(--control-background-color-checked-focus);\n  box-shadow: var(--focus-ring);\n}\n\n// Invalid\n.checkbox:not(.checkbox-disabled).checkbox-invalid .checkbox-control {\n  border-color: var(--gr-form-element-invalid-text-color);\n}\n\n// Checked/indeterminate + invalid\n.checkbox.checkbox-checked:not(.checkbox-disabled).checkbox-invalid .checkbox-control,\n.checkbox.checkbox-indeterminate:not(.checkbox-disabled).checkbox-invalid .checkbox-control {\n  border-color: var(--gr-form-element-invalid-text-color);\n  background-color: var(--gr-form-element-invalid-text-color);\n}\n\n// Disabled\n.checkbox-disabled {\n  opacity: 0.5;\n}\n\n.checkbox-label {\n  line-height: var(--gr-line-height-normal);\n  margin-left: 0.5em;\n  user-select: none;\n}\n\n.checkbox-top .checkbox-label {\n  margin-top: var(--label-margin-top-adjustment);\n}\n\n.checkbox-bottom .checkbox-label {\n  margin-bottom: var(--label-margin-bottom-adjustment);\n}\n// Invalid text\n.invalid-text {\n  display: none;\n}\n\n// Invalid text\n.checkbox-invalid-text {\n  display: none;\n}\n\n:host(.checkbox-has-invalid-text) {\n  display: block;\n\n  .checkbox-invalid-text {\n    display: flex;\n    margin-left: -2px;\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-invalid-text-color);\n    margin-top: var(--gr-spacing-xxx-small);\n    font-size: var(--gr-form-element-invalid-text-font-size-medium);\n    min-height: 1.875rem;\n\n    .icon {\n      margin-top: var(--gr-spacing-xxx-small);\n      margin-right: var(--gr-spacing-xx-small);\n\n      svg {\n        width: 1.4em;\n        height: 1.4em;\n      }\n    }\n  }\n}\n","import { Component, Host, h, Element, State, Prop, Event, EventEmitter, Method, Watch } from '@stencil/core';\nimport { inheritAttributes, renderHiddenInput } from '../../utils/helpers';\nimport { hasSlot } from '../../utils/slot';\n\nlet id = 0;\n\n/**\n * @slot - The checkboxes label.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n */\n@Component({\n  tag: 'gr-checkbox',\n  styleUrl: 'checkbox.scss',\n  shadow: true,\n})\nexport class Checkbox {\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n  private invalidTextId = `checkbox-invalid-text-${id}`;\n  private input: HTMLInputElement;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el: HTMLGrCheckboxElement;\n\n  @State() hasInvalidTextSlot = false;\n\n  @State() hasFocus = false;\n\n  /**\n   * The checkbox's value attribute.\n   */\n  @Prop() value: string;\n\n  /**\n   * Set to true to disable the checkbox.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name: string = this.inputId;\n\n  /** Set to true to draw the checkbox in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** Set to true to draw the checkbox in an indeterminate state. */\n  @Prop({ mutable: true, reflect: true }) indeterminate = false;\n\n  /** The radio group's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text. */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** The checkbox's alignment. */\n  @Prop({ reflect: true }) alignment: 'top' | 'center' | 'bottom' = 'center';\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event({ eventName: 'gr-change' }) grChange: EventEmitter<void>;\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleCheckedChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.grChange.emit();\n  }\n\n  @Watch('invalidText')\n  handleInvalidTextChange() {\n    this.handleSlotChange();\n  }\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  componentDidLoad() {\n    this.input.indeterminate = this.indeterminate;\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async removeFocus() {\n    this.input.blur();\n  }\n\n  handleClick() {\n    this.checked = this.input.checked;\n    this.indeterminate = false;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  handleMouseDown(event: MouseEvent) {\n    // Prevent clicks on the label from briefly blurring the input\n    event.preventDefault();\n    this.input.focus();\n  }\n\n  handleSlotChange() {\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.checked ? this.value : '', this.disabled);\n\n    const hasInvalidText = this.invalidText ? true : this.hasInvalidTextSlot;\n    const showInvalidText = this.invalid ? true : false;\n\n    const ariaLabelAttributes = this.inheritedAttributes['aria-label']\n      ? { 'aria-label': this.inheritedAttributes['aria-label'] }\n      : { 'aria-labelledby': this.labelId };\n\n    return (\n      <Host\n        class={{\n          'checkbox-disabled': this.disabled,\n          'checkbox-has-invalid-text': hasInvalidText,\n        }}\n      >\n        <label\n          class={{\n            'checkbox': true,\n            'checkbox-checked': this.checked,\n            'checkbox-invalid': this.invalid,\n            'checkbox-disabled': this.disabled,\n            'checkbox-focused': this.hasFocus,\n            'checkbox-indeterminate': this.indeterminate,\n            [`checkbox-${this.alignment}`]: true,\n          }}\n          htmlFor={this.inputId}\n          onMouseDown={this.handleMouseDown}\n        >\n          <span class=\"checkbox-control\">\n            {this.checked && (\n              <span class=\"checkbox-icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(3.428571, 3.428571)\">\n                        <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                        <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            {!this.checked && this.indeterminate && (\n              <span class=\"checkbox-icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(2.285714, 6.857143)\">\n                        <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            <input\n              ref={el => (this.input = el)}\n              id={this.inputId}\n              type=\"checkbox\"\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              role=\"checkbox\"\n              aria-invalid={this.invalid}\n              aria-checked={this.checked ? 'true' : 'false'}\n              {...ariaLabelAttributes}\n              aria-describedby={this.invalid ? this.invalidTextId : ''}\n              onClick={this.handleClick}\n              onBlur={this.handleBlur}\n              onFocus={this.handleFocus}\n            />\n          </span>\n\n          <span id={this.labelId} class=\"checkbox-label\">\n            <slot></slot>\n          </span>\n        </label>\n        {showInvalidText && (\n          <div id={this.invalidTextId} class=\"checkbox-invalid-text\" aria-hidden={hasInvalidText ? 'false' : 'true'}>\n            <div class=\"icon\">\n              <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                <title>Alert Circle</title>\n                <path\n                  d=\"M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48Zm0,319.91a20,20,0,1,1,20-20A20,20,0,0,1,256,367.91Zm21.72-201.15-5.74,122a16,16,0,0,1-32,0l-5.74-121.94v-.05a21.74,21.74,0,1,1,43.44,0Z\"\n                  fill=\"currentColor\"\n                />\n              </svg>\n            </div>\n            <div class=\"text\">\n              <slot name=\"invalid-text\">{this.invalidText}</slot>\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n","@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --margin-between-fields: Margin between the children\n   * @prop --margin-between-fields-horizontal: Margin between the children when layout is horizontal\n   * @prop --align-fields: Alignment of fields on cross-axis, an `align-items` Flexbox property\n   */\n  --margin-between-fields: var(--gr-spacing-xx-small);\n  --margin-between-fields-horizontal: var(--gr-spacing-medium);\n  --align-fields: flex-start;\n\n  display: block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n.field-group {\n  margin: 0;\n  padding: 0;\n  border: none;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  align-items: var(--align-fields);\n  gap: var(--margin-between-fields);\n}\n\n.field-group-horizontal .content {\n  flex-direction: row;\n  gap: var(--margin-between-fields-horizontal);\n}\n\n.field-group-label {\n  display: none;\n}\n\n.field-group-has-label {\n  .field-group-label {\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-label-color);\n    margin-bottom: var(--gr-spacing-xxx-small);\n    font-size: var(--gr-form-element-label-font-size-medium);\n\n    margin: 0;\n    padding: 0;\n    display: flex;\n\n    margin-bottom: var(--gr-spacing-xxx-small);\n  }\n}\n","import { Component, h, Prop, Element, State, Watch } from '@stencil/core';\nimport { hasSlot } from '../../utils/slot';\n\n/**\n * @slot - The default slot where fields are placed.\n * @slot label - The field group label. Recommended for proper accessibility. Alternatively, you can use the label prop.\n */\n@Component({\n  tag: 'gr-field-group',\n  styleUrl: 'field-group.scss',\n  shadow: true,\n})\nexport class FieldGroup {\n  @Element() el!: HTMLElement;\n\n  @State() hasLabelSlot = false;\n\n  /** The field group label. Recommended for proper accessibility. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Render the fields horizontal instead of vertical */\n  @Prop({ reflect: true }) horizontal = false;\n\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  connectedCallback() {\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  handleSlotChange() {\n    this.hasLabelSlot = hasSlot(this.el, 'label');\n  }\n\n  render() {\n    const hasLabel = this.label ? true : this.hasLabelSlot;\n\n    return (\n      <fieldset\n        class={{\n          'field-group': true,\n          'field-group-horizontal': this.horizontal,\n          'field-group-has-label': hasLabel,\n        }}\n      >\n        <legend class=\"field-group-label\" aria-hidden={hasLabel ? 'false' : 'true'}>\n          <slot name=\"label\">{this.label}</slot>\n        </legend>\n        <div class=\"content\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    );\n  }\n}\n"]}