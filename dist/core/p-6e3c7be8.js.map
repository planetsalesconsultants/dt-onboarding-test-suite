{"version":3,"sources":["src/utils/offset.ts","src/utils/scroll.ts"],"names":["getOffset","element","parent","top","Math","round","getBoundingClientRect","left","scrollIntoView","container","direction","behavior","offset","offsetTop","scrollTop","offsetLeft","scrollLeft","minX","maxX","offsetWidth","minY","maxY","offsetHeight","scrollTo","clientWidth","clientHeight"],"mappings":";;;SAOgBA,EAAUC,EAAsBC,GAC9C,MAAO,CACLC,IAAKC,KAAKC,MAAMJ,EAAQK,wBAAwBH,IAAMD,EAAOI,wBAAwBH,KACrFI,KAAMH,KAAKC,MAAMJ,EAAQK,wBAAwBC,KAAOL,EAAOI,wBAAwBC,gBCiB3EC,EACdP,EACAQ,EACAC,EAAgD,WAChDC,EAA8B,UAE9B,MAAMC,EAASZ,EAAUC,EAASQ,GAClC,MAAMI,EAAYD,EAAOT,IAAMM,EAAUK,UACzC,MAAMC,EAAaH,EAAOL,KAAOE,EAAUO,WAC3C,MAAMC,EAAOR,EAAUO,WACvB,MAAME,EAAOT,EAAUO,WAAaP,EAAUU,YAC9C,MAAMC,EAAOX,EAAUK,UACvB,MAAMO,EAAOZ,EAAUK,UAAYL,EAAUa,aAE7C,GAAIZ,IAAc,cAAgBA,IAAc,OAAQ,CACtD,GAAIK,EAAaE,EAAM,CACrBR,EAAUc,SAAS,CAAEhB,KAAMQ,EAAYJ,SAAAA,SAClC,GAAII,EAAad,EAAQuB,YAAcN,EAAM,CAClDT,EAAUc,SAAS,CAAEhB,KAAMQ,EAAaN,EAAUU,YAAclB,EAAQuB,YAAab,SAAAA,KAIzF,GAAID,IAAc,YAAcA,IAAc,OAAQ,CACpD,GAAIG,EAAYO,EAAM,CACpBX,EAAUc,SAAS,CAAEpB,IAAKU,EAAWF,SAAAA,SAChC,GAAIE,EAAYZ,EAAQwB,aAAeJ,EAAM,CAClDZ,EAAUc,SAAS,CAAEpB,IAAKU,EAAYJ,EAAUa,aAAerB,EAAQwB,aAAcd,SAAAA","sourcesContent":["//\n// Returns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\n// parent doesn't have to be positioned relative or absolute.\n//\n// NOTE: This was created to work around what appears to be a bug in Chrome where a slotted element's offsetParent\n// seems to ignore elements inside the surrounding shadow DOM: https://bugs.chromium.org/p/chromium/issues/detail?id=920069\n//\nexport function getOffset(element: HTMLElement, parent: HTMLElement) {\n  return {\n    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),\n    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left)\n  };  \n}\n","import { getOffset } from './offset';\n\nconst locks = new Set();\n\n//\n// Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\n// without premature unlocking.\n//\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\n  locks.add(lockingEl);\n  document.body.classList.add('sl-scroll-lock');\n}\n\n//\n// Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\n//\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\n  locks.delete(lockingEl);\n\n  if (locks.size === 0) {\n    document.body.classList.remove('sl-scroll-lock');\n  }\n}\n\n//\n// Scrolls an element into view of its container. If the element is already in view, nothing will happen.\n//\nexport function scrollIntoView(\n  element: HTMLElement,\n  container: HTMLElement,\n  direction: 'horizontal' | 'vertical' | 'both' = 'vertical',\n  behavior: 'smooth' | 'auto' = 'smooth'\n) {\n  const offset = getOffset(element, container);\n  const offsetTop = offset.top + container.scrollTop;\n  const offsetLeft = offset.left + container.scrollLeft;\n  const minX = container.scrollLeft;\n  const maxX = container.scrollLeft + container.offsetWidth;\n  const minY = container.scrollTop;\n  const maxY = container.scrollTop + container.offsetHeight;\n\n  if (direction === 'horizontal' || direction === 'both') {\n    if (offsetLeft < minX) {\n      container.scrollTo({ left: offsetLeft, behavior });\n    } else if (offsetLeft + element.clientWidth > maxX) {\n      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });\n    }\n  }\n\n  if (direction === 'vertical' || direction === 'both') {\n    if (offsetTop < minY) {\n      container.scrollTo({ top: offsetTop, behavior });\n    } else if (offsetTop + element.clientHeight > maxY) {\n      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });\n    }\n  }\n}\n"]}