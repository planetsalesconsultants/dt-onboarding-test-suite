{"version":3,"sources":["src/components/textarea/textarea.scss?tag=gr-textarea&encapsulation=shadow","src/components/textarea/textarea.tsx"],"names":["textareaCss","id","Textarea","this","inputId","labelId","helpTextId","invalidTextId","inheritedAttributes","[object Object]","grChange","debounceEvent","debounce","nativeInput","textarea","value","emit","handleSlotChange","setTextareaHeight","handleChange","bind","handleInput","handleBlur","handleFocus","handleLabelClick","el","shadowRoot","addEventListener","debounceChanged","inheritAttributes","options","focus","blur","select","selectionStart","selectionEnd","selectionDirection","setSelectionRange","replacement","start","end","selectMode","setRangeText","grInput","console","log","resize","style","height","scrollHeight","undefined","hasFocus","grBlur","maxHeight","grFocus","hasLabelSlot","hasSlot","hasHelpTextSlot","hasInvalidTextSlot","renderHiddenInput","name","disabled","h","FormControl","label","helpText","invalidText","invalid","size","onLabelClick","requiredIndicator","class","textarea-disabled","textarea-invalid","textarea-focused","textarea-empty","_a","length","Object","assign","ref","placeholder","readOnly","readonly","rows","maxlength","autoCapitalize","autocapitalize","autoCorrect","autocorrect","autoFocus","autofocus","enterKeyHint","enterkeyhint","inputMode","inputmode","spellcheck","aria-labelledby","aria-describedby","aria-invalid","aria-required","onChange","onInput","onFocus","onBlur"],"mappings":"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","sourcesContent":["@import '../../functional-components/form-control/form-control';\n@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --font-size: Font size of the textarea\n   * @prop --font-weight: Font weight of the textarea\n   *\n   * @prop --background-color: Background color of the textarea\n   * @prop --background-color-hover: Background color of the textarea on hover\n   * @prop --background-color-focus: Background color of the textarea on focus\n   * @prop --background-color-invalid: Background color of the textarea when invalid\n   * @prop --background-color-invalid-hover: Background color of the textarea when invalid on focus\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Border color of the textarea\n   * @prop --border-color-hover: Border color of the textarea on hover\n   * @prop --border-color-focus: Border color of the textarea on focus\n   * @prop --border-color-invalid: Border color of the textarea when invalid\n   * @prop --border-color-invalid-hover: Border color of the textarea when invalid on focus\n   *\n   * @prop --color: Text color of the textarea\n   *\n   * @prop --placeholder-color: Text color of the placeholder\n   *\n   * @prop --min-height: Minimum height of the textarea\n   *\n   * @prop --padding-start: Left padding of the textarea (will be right padding when we support right-to-left direction)\n   * @prop --padding-end: Right padding of the textarea (will be left padding when we support right-to-left direction)\n   *\n   * @prop --focus-ring: The focus ring style to use when the textarea receives focus, a `box-shadow` property.\n   */\n  --font-size: var(--gr-form-element-font-size-medium);\n  --font-weight: var(--gr-font-weight-normal);\n\n  --background-color: var(--gr-color-white);\n  --background-color-hover: var(--gr-color-white);\n  --background-color-focus: var(--gr-color-white);\n  --background-color-invalid: var(--gr-color-white);\n  --background-color-invalid-hover: var(--gr-color-white);\n\n  --border-radius: var(--gr-form-element-border-radius-small);\n  --border-color: var(--gr-color-light-shade);\n  --border-color-hover: var(--gr-color-medium);\n  --border-color-focus: var(--gr-color-primary);\n  --border-color-invalid: var(--gr-color-danger);\n  --border-color-invalid-hover: var(--gr-color-danger-shade);\n\n  --color: var(--gr-color-dark-tint);\n\n  --placeholder-color: var(--gr-color-medium-tint);\n\n  --min-height: var(--gr-form-element-height-medium);\n\n  --padding-start: var(--gr-spacing-medium);\n  --padding-end: var(--gr-spacing-medium);\n  --padding-top: var(--gr-spacing-x-small);\n  --padding-bottom: var(--gr-spacing-x-small);\n\n  --focus-ring: 0 0 0 var(--gr-focus-ring-width) rgb(var(--gr-color-primary-rgb), 0.33);\n\n  display: block;\n\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n// Size modifiers\n// --------------------------------------------------\n.textarea-small {\n  --font-size: var(--gr-form-element-font-size-small);\n  --min-height: var(--gr-form-element-height-small);\n\n  --padding-start: var(--gr-spacing-small);\n  --padding-end: var(--gr-spacing-small);\n}\n\n.textarea-large {\n  --font-size: var(--gr-form-element-font-size-large);\n  --min-height: var(--gr-form-element-height-large);\n\n  --padding-start: var(--gr-spacing-large);\n  --padding-end: var(--gr-spacing-large);\n}\n\n.textarea {\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-family: var(--gr-font-family);\n  font-size: var(--font-size);\n  font-weight: var(--font-weight);\n  line-height: var(--gr-line-height-normal);\n  letter-spacing: var(--gr-letter-spacing-normal);\n  background-color: var(--background-color);\n  border: solid 1px var(--border-color);\n  border-radius: var(--border-radius);\n  vertical-align: middle;\n  transition: 150ms color, 150ms border, 150ms box-shadow;\n  cursor: text;\n\n  &.textarea-invalid:not(.textarea-disabled) {\n    background-color: var(--background-color-invalid);\n    border-color: var(--border-color-invalid);\n  }\n\n  &:hover.textarea-invalid:not(.textarea-disabled):not(.textarea-focused) {\n    background-color: var(--background-color-invalid-hover);\n    border-color: var(--border-color-invalid-hover);\n  }\n\n  &.textarea-invalid:not(.textarea-disabled) {\n    background-color: var(--background-color-invalid);\n    border-color: var(--border-color-invalid);\n  }\n\n  &:hover:not(.textarea-disabled) {\n    background-color: var(--background-color-hover);\n    border-color: var(--border-color-hover);\n  }\n\n  &.textarea-focused:not(.textarea-disabled) {\n    outline: none;\n    box-shadow: var(--focus-ring);\n    border-color: var(--border-color-focus);\n    background-color: var(--background-color-focus);\n  }\n\n  &.textarea-disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    outline: none;\n  }\n}\n\n.textarea-control {\n  flex: 1 1 auto;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: 1.4;\n  color: var(--gr-color-dark-tint);\n  border: none;\n  background: none;\n  box-shadow: none;\n  cursor: inherit;\n  -webkit-appearance: none;\n\n  padding-top: var(--padding-top);\n  padding-left: var(--padding-start);\n  padding-right: var(--padding-end);\n  padding-bottom: var(--padding-bottom);\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  &::placeholder {\n    color: var(--gr-color-medium-tint);\n    user-select: none;\n  }\n\n  &:focus {\n    outline: none;\n  }\n}\n\n// Resize types\n// --------------------------------------------------\n\n.textarea-resize-none .textarea-control {\n  resize: none;\n}\n\n.textarea-resize-vertical .textarea-control {\n  resize: vertical;\n}\n\n.textarea-resize-auto .textarea-control {\n  height: auto;\n  resize: none;\n}\n","import { Component, h, Prop, Element, Event, EventEmitter, State, Watch, Method } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { debounceEvent, inheritAttributes, renderHiddenInput } from '../../utils/helpers';\nimport { hasSlot } from '../../utils/slot';\n\nlet id = 0;\n\n/**\n * @slot label - The textarea's label. Alternatively, you can use the label prop.\n * @slot help-text - Help text that describes how to use the textarea.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n */\n@Component({\n  tag: 'gr-textarea',\n  styleUrl: 'textarea.scss',\n  shadow: true,\n})\nexport class Textarea {\n  private inputId = `textarea-${++id}`;\n  private labelId = `textarea-label-${id}`;\n  private helpTextId = `textarea-help-text-${id}`;\n  private invalidTextId = `textarea-invalid-text-${id}`;\n  private textarea: HTMLTextAreaElement;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el!: HTMLGrTextareaElement;\n\n  @State() hasFocus = false;\n  @State() hasHelpTextSlot = false;\n  @State() hasInvalidTextSlot = false;\n  @State() hasLabelSlot = false;\n\n  /** The textarea's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The textarea's name attribute. */\n  @Prop({ reflect: true }) name = '';\n\n  /** The textarea's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value = '';\n\n  /** The textarea's label. Alternatively, you can use the label slot. */\n  @Prop() label: string | undefined;\n\n  /** Set to true to display a required indicator, adds an asterisk to label */\n  @Prop() requiredIndicator = false;\n\n  /** The textarea's help text. Alternatively, you can use the help-text slot. */\n  @Prop() helpText = '';\n\n  /** The input's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text instead of the help text */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** The textarea's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** The number of rows to display by default. */\n  @Prop() rows = 4;\n\n  /** The number of max rows */\n  @Prop() maxHeight: number;\n\n  /** Controls how the textarea can be resized. */\n  @Prop() resize: 'none' | 'vertical' | 'auto' = 'vertical';\n\n  /** Set to true to disable the textarea. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** If `true`, the user cannot modify the value. */\n  @Prop({ reflect: true }) readonly = false;\n\n  /** Specifies how many characters are allowed. */\n  @Prop() maxlength: number;\n\n  /** The textarea's inputmode attribute. */\n  @Prop() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  /** If `true`, the element will have its spelling and grammar checked. */\n  @Prop() spellcheck = false;\n\n  /**\n   * A hint to the browser for which enter key to display.\n   * Possible values: `\"enter\"`, `\"done\"`, `\"go\"`, `\"next\"`,\n   * `\"previous\"`, `\"search\"`, and `\"send\"`.\n   */\n  @Prop() enterkeyhint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\n\n  /**\n   * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n   * Available options: `\"off\"`, `\"none\"`, `\"on\"`, `\"sentences\"`, `\"words\"`, `\"characters\"`.\n   */\n  @Prop() autocapitalize = 'off';\n\n  /**\n   * Whether auto correction should be enabled when the user is entering/editing the text value.\n   */\n  @Prop() autocorrect: 'on' | 'off' = 'off';\n\n  /**\n   * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n   */\n  @Prop() autofocus = false;\n\n  /**\n   * Set the amount of time, in milliseconds, to wait to trigger the `gr-change` event after each keystroke. This also impacts form bindings such as `ngModel` or `v-model`.\n   */\n  @Prop() debounce = 0;\n\n  @Watch('debounce')\n  protected debounceChanged() {\n    this.grChange = debounceEvent(this.grChange, this.debounce);\n  }\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    const nativeInput = this.textarea;\n    const value = this.value;\n    if (nativeInput && nativeInput.value !== value) {\n      nativeInput.value = value;\n    }\n    this.grChange.emit();\n  }\n\n  @Watch('helpText')\n  @Watch('invalidText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  @Watch('rows')\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n\n  /** Emitted when the textarea's value changes. */\n  @Event({ eventName: 'gr-change' }) grChange: EventEmitter<void>;\n\n  /** Emitted when the textarea receives input. */\n  @Event({ eventName: 'gr-input' }) grInput: EventEmitter<void>;\n\n  /** Emitted when the textarea has focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus!: EventEmitter<void>;\n\n  /** Emitted when the textarea loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur!: EventEmitter<void>;\n\n  connectedCallback() {\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleLabelClick = this.handleLabelClick.bind(this);\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n\n    this.debounceChanged();\n  }\n\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label', 'tabindex', 'title']);\n  }\n\n  /** Sets focus on the textarea. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.textarea.focus(options);\n  }\n\n  /** Removes focus fromt the textarea. */\n  @Method()\n  async removeFocus() {\n    this.textarea.blur();\n  }\n\n  /** Selects all the text in the input. */\n  @Method()\n  async select() {\n    return this.textarea.select();\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  @Method()\n  async setSelectionRange(\n    selectionStart: number,\n    selectionEnd: number,\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none',\n  ) {\n    return this.textarea.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  @Method()\n  async setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve',\n  ) {\n    this.textarea.setRangeText(replacement, start, end, selectMode);\n\n    if (this.value !== this.textarea.value) {\n      this.value = this.textarea.value;\n      this.setTextareaHeight();\n      this.grChange.emit();\n      this.grInput.emit();\n    }\n  }\n\n  @Method()\n  async setTextareaHeight() {\n    console.log('ok');\n\n    if (this.resize === 'auto') {\n      this.textarea.style.height = 'auto';\n      this.textarea.style.height = this.textarea.scrollHeight + 'px';\n    } else {\n      this.textarea.style.height = undefined;\n    }\n  }\n\n  handleChange() {\n    this.grChange.emit();\n  }\n\n  handleInput() {\n    this.value = this.textarea.value;\n    this.setTextareaHeight();\n    this.grInput.emit();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.textarea.style.maxHeight = this.maxHeight + 'px';\n\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  handleLabelClick() {\n    this.textarea.focus();\n  }\n\n  handleSlotChange() {\n    this.hasLabelSlot = hasSlot(this.el, 'label');\n    this.hasHelpTextSlot = hasSlot(this.el, 'help-text');\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.value, this.disabled);\n\n    return (\n      <FormControl\n        inputId={this.inputId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        helpTextId={this.helpTextId}\n        helpText={this.helpText}\n        hasHelpTextSlot={this.hasHelpTextSlot}\n        invalidTextId={this.invalidTextId}\n        invalidText={this.invalidText}\n        invalid={this.invalid}\n        hasInvalidTextSlot={this.hasInvalidTextSlot}\n        size={this.size}\n        onLabelClick={this.handleLabelClick}\n        requiredIndicator={this.requiredIndicator}\n      >\n        <div\n          class={{\n            'textarea': true,\n            [`textarea-${this.size}`]: true,\n            'textarea-disabled': this.disabled,\n            'textarea-invalid': this.invalid,\n            'textarea-focused': this.hasFocus,\n            'textarea-empty': this.value?.length === 0,\n            [`textarea-resize-${this.resize}`]: true,\n          }}\n        >\n          <textarea\n            ref={el => (this.textarea = el)}\n            id={this.inputId}\n            class=\"textarea-control\"\n            name={this.name}\n            placeholder={this.placeholder}\n            disabled={this.disabled}\n            readOnly={this.readonly}\n            rows={this.rows}\n            maxlength={this.maxlength}\n            autoCapitalize={this.autocapitalize}\n            autoCorrect={this.autocorrect}\n            autoFocus={this.autofocus}\n            enterKeyHint={this.enterkeyhint}\n            inputMode={this.inputmode}\n            value={this.value}\n            spellcheck={this.spellcheck}\n            aria-labelledby={this.labelId}\n            aria-describedby={this.invalid ? this.invalidTextId : this.helpTextId}\n            aria-invalid={this.invalid ? 'true' : 'false'}\n            aria-required={this.requiredIndicator ? 'true' : 'false'}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            {...this.inheritedAttributes}\n          />\n        </div>\n      </FormControl>\n    );\n  }\n}\n"]}