{"version":3,"sources":["src/components/radio/radio.scss?tag=gr-radio&encapsulation=shadow","src/components/radio/radio.tsx","src/components/radio-group/radio-group.scss?tag=gr-radio-group&encapsulation=shadow","src/components/radio-group/radio-group.tsx"],"names":["radioCss","id","Radio","this","inputId","labelId","radioGroup","inheritedAttributes","updateState","checked","value","[object Object]","buttonTabindex","handleBlur","bind","handleFocus","undefined","el","closest","addEventListener","inheritAttributes","removeEventListener","options","input","focus","blur","hasFocus","grBlur","emit","grFocus","ariaLabelAttributes","aria-label","aria-labelledby","h","Host","Object","assign","class","radio-disabled","disabled","tabindex","role","onBlur","onFocus","aria-checked","aria-hidden","radio","radio-checked","radio-focused","alignment","htmlFor","viewBox","stroke","stroke-width","fill","fill-rule","cx","cy","r","ref","type","radioGroupCss","RadioGroup","invalidTextId","setRadioTabindex","radios","getRadios","first","find","focusable","setButtonTabindex","onClick","ev","preventDefault","selectedRadio","target","currentValue","newValue","allowEmptySelection","grChange","handleSlotChange","shadowRoot","Array","from","querySelectorAll","contains","filter","includes","index","findIndex","current","next","code","length","setFocus","hasLabelSlot","hasSlot","hasInvalidTextSlot","renderHiddenInput","name","hasLabel","label","hasInvalidText","invalidText","showInvalidText","invalid","radio-group","radio-group-horizontal","horizontal","radio-group-invalid","radio-group-has-label","radio-group-has-invalid-text","aria-invalid","aria-required","requiredIndicator","aria-describedby","d"],"mappings":"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","sourcesContent":["@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --label-color: Color of the label\n   *\n   * @prop --control-size: Size of the control\n   *\n   * @prop --control-border-color: Border color of the control\n   * @prop --control-background-color: Background color of the control\n   *\n   * @prop --control-border-color-hover: Border color of the control on hover\n   * @prop --control-background-color-hover: Background color of the control on hover\n   *\n   * @prop --control-border-color-focus: Border color of the control on focus\n   * @prop --control-background-color-focus: Background color of the control on focus\n   *\n   * @prop --control-color-checked: Color of the control when checked (the small circle)\n   * @prop --control-border-color-checked: Border color of the control when checked\n   * @prop --control-background-color-checked: Background color of the control when checked\n   *\n   * @prop --control-border-color-checked-hover: Border color of the control when checked on hover\n   * @prop --control-background-color-checked-hover: Background color of the control when checked on hover\n   *\n   * @prop --control-border-color-checked-focus: Border color of the control when checked on focus\n   * @prop --control-background-color-checked-focus: Background color of the control when checked on focus\n   */\n  --label-color: var(--gr-color-dark-tint);\n  --label-margin-top-adjustment: -7px;\n  --label-margin-bottom-adjustment: -4px;\n\n  --control-size: var(--gr-toggle-size);\n\n  --control-border-color: var(--gr-color-light-shade);\n  --control-background-color: var(--gr-color-white);\n\n  --control-border-color-hover: var(--gr-color-medium);\n  --control-background-color-hover: var(--gr-color-white);\n\n  --control-border-color-focus: var(--gr-color-medium);\n  --control-background-color-focus: var(--gr-color-medium);\n\n  --control-color-checked: var(--gr-color-white);\n  --control-border-color-checked: var(--gr-color-primary);\n  --control-background-color-checked: var(--gr-color-primary);\n\n  --control-border-color-checked-hover: var(--gr-color-primary-shade);\n  --control-background-color-checked-hover: var(--gr-color-primary-shade);\n\n  --control-border-color-checked-focus: var(--gr-color-primary-shade);\n  --control-background-color-checked-focus: var(--gr-color-primary-shade);\n\n  --focus-ring: 0 0 0 var(--gr-focus-ring-width) rgb(var(--gr-color-primary-rgb), 0.33);\n\n  display: inline-block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n// Alignment modifiers\n// --------------------------------------------------\n.radio-top {\n  align-items: flex-start;\n}\n\n.radio-center {\n  align-items: center;\n}\n\n.radio-bottom {\n  align-items: flex-end;\n}\n\n.radio {\n  display: inline-flex;\n  font-family: var(--gr-font-family);\n  font-size: var(--gr-form-element-font-size-medium);\n  font-weight: var(--gr-font-weight-normal);\n  color: var(--label-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.radio-icon {\n  display: inline-flex;\n  width: var(--control-size);\n  height: var(--control-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.radio-control {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--control-size);\n  height: var(--control-size);\n  border: solid 1px var(--control-border-color);\n  border-radius: 50%;\n  background-color: var(--control-background-color);\n  color: transparent;\n  transition: 150ms border-color, 150ms background-color, 150ms color, 150ms box-shadow;\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.radio:not(.radio-checked):not(.radio-disabled) .radio-control:hover {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n}\n\n// Focus\n.radio.radio-focused:not(.radio-checked):not(.radio-disabled) .radio-control {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n  box-shadow: var(--focus-ring);\n}\n\n// Checked\n.radio-checked .radio-control {\n  color: var(--control-color-checked);\n  border-color: var(--control-border-color-checked);\n  background-color: var(--control-background-color-checked);\n}\n\n// Checked + hover\n.radio.radio-checked:not(.radio-disabled) .radio-control:hover {\n  border-color: var(--control-border-color-checked-hover);\n  background-color: var(--control-background-color-checked-hover);\n}\n\n// Checked + focus\n.radio.radio-checked:not(.radio-disabled).radio-focused .radio-control {\n  border-color: var(--control-border-color-checked-focus);\n  background-color: var(--control-background-color-checked-focus);\n  box-shadow: var(--focus-ring);\n}\n\n// Disabled\n.radio-disabled {\n  opacity: 0.5;\n}\n\n.radio-label {\n  line-height: var(--gr-line-height-normal);\n  margin-left: 0.5em;\n  user-select: none;\n}\n\n.radio-top .radio-label {\n  margin-top: var(--label-margin-top-adjustment);\n}\n\n.radio-bottom .radio-label {\n  margin-bottom: var(--label-margin-bottom-adjustment);\n}\n\n:host(:focus) {\n  outline: none;\n}\n","import { Component, Host, h, Element, State, Prop, Event, EventEmitter, Method } from '@stencil/core';\nimport { addEventListener, inheritAttributes, removeEventListener } from '../../utils/helpers';\n\nlet id = 0;\n\n/**\n * @slot - The radio's label.\n */\n@Component({\n  tag: 'gr-radio',\n  styleUrl: 'radio.scss',\n  shadow: true,\n})\nexport class Radio {\n  private inputId = `radio-${++id}`;\n  private labelId = `radio-label-${id}`;\n  private input: HTMLInputElement;\n  private radioGroup: HTMLGrRadioGroupElement | null = null;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el: HTMLGrRadioElement;\n\n  @State() hasFocus = false;\n\n  /** The radio's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /** Set to true to disable the radio. */\n  @Prop() disabled = false;\n\n  /** Set to true to draw the radio in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** The radio's alignment attribute. */\n  @Prop({ reflect: true }) alignment: 'top' | 'center' | 'bottom' = 'center';\n\n  /**\n   * The tabindex of the radio button.\n   * @internal\n   */\n  @State() buttonTabindex = -1;\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur: EventEmitter;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus: EventEmitter;\n\n  /** @internal */\n  @Method()\n  async setButtonTabindex(value: number) {\n    this.buttonTabindex = value;\n  }\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n\n    if (this.value === undefined) {\n      this.value = this.inputId;\n    }\n    const radioGroup = (this.radioGroup = this.el.closest('gr-radio-group'));\n    if (radioGroup) {\n      this.updateState();\n      addEventListener(radioGroup, 'gr-change', this.updateState);\n\n      // Needed for the Vue wrappers\n      addEventListener(radioGroup, 'v-gr-change', this.updateState);\n    }\n  }\n\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  disconnectedCallback() {\n    const radioGroup = this.radioGroup;\n    if (radioGroup) {\n      removeEventListener(radioGroup, 'gr-change', this.updateState);\n\n      // Needed for the Vue wrappers\n      removeEventListener(radioGroup, 'v-gr-change', this.updateState);\n      this.radioGroup = null;\n    }\n  }\n\n  /** Sets focus on the radio. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the radio. */\n  @Method()\n  async removeFocus() {\n    this.input.blur();\n  }\n\n  private updateState = () => {\n    if (this.radioGroup) {\n      this.checked = this.radioGroup.value === this.value;\n    }\n  };\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  render() {\n    const ariaLabelAttributes = this.inheritedAttributes['aria-label']\n      ? { 'aria-label': this.inheritedAttributes['aria-label'] }\n      : { 'aria-labelledby': this.labelId };\n\n    return (\n      <Host\n        class={{\n          'radio-disabled': this.disabled,\n        }}\n        tabindex={this.buttonTabindex}\n        role=\"radio\"\n        onBlur={this.handleBlur}\n        onFocus={this.handleFocus}\n        aria-checked={`${this.checked}`}\n        aria-hidden={this.disabled ? 'true' : null}\n        {...ariaLabelAttributes}\n      >\n        <label\n          class={{\n            'radio': true,\n            'radio-checked': this.checked,\n            'radio-disabled': this.disabled,\n            'radio-focused': this.hasFocus,\n            [`radio-${this.alignment}`]: true,\n          }}\n          htmlFor={this.inputId}\n        >\n          <span class=\"radio-control\">\n            <span class=\"radio-icon\">\n              <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                  <g fill=\"currentColor\">\n                    <circle cx=\"8\" cy=\"8\" r=\"3.42857143\"></circle>\n                  </g>\n                </g>\n              </svg>\n            </span>\n\n            <input\n              ref={el => (this.input = el)}\n              id={this.inputId}\n              type=\"radio\"\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              tabindex=\"-1\"\n            />\n          </span>\n\n          <span id={this.labelId} class=\"radio-label\">\n            <slot />\n          </span>\n        </label>\n      </Host>\n    );\n  }\n}\n","@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --margin-between-radios: Margin between the gr-radio children\n   * @prop --margin-between-radios-horizontal: Margin between the gr-radio children when layout is horizontal\n   * @prop --align-radios: Alignment of radio's on cross-axis, an `align-items` Flexbox property\n   */\n  --margin-between-radios: var(--gr-spacing-xx-small);\n  --margin-between-radios-horizontal: var(--gr-spacing-medium);\n  --align-radios: flex-start;\n\n  display: block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n.radio-group {\n  margin: 0;\n  padding: 0;\n  border: none;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  align-items: var(--align-radios);\n  gap: var(--margin-between-radios);\n}\n\n.radio-group-horizontal .content {\n  flex-direction: row;\n  gap: var(--margin-between-radios-horizontal);\n}\n\n.radio-group-label {\n  display: none;\n}\n\n.radio-group-has-label {\n  .radio-group-label {\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-label-color);\n    font-size: var(--gr-form-element-label-font-size-medium);\n\n    margin: 0;\n    padding: 0;\n    display: flex;\n\n    margin-bottom: var(--gr-spacing-xxx-small);\n  }\n\n  .radio-group-label .asterisk {\n    margin-left: var(--gr-spacing-x-small);\n    color: var(--gr-color-medium);\n\n    svg {\n      width: 0.6em;\n      height: 0.6em;\n      margin-bottom: var(--gr-spacing-xxx-small);\n    }\n  }\n}\n\n.radio-group-invalid {\n  ::slotted(gr-radio) {\n    --control-border-color: var(--gr-form-element-invalid-text-color);\n    --control-background-color-checked: var(--gr-form-element-invalid-text-color);\n  }\n}\n\n// Invalid text\n.radio-group-invalid-text {\n  display: none;\n}\n\n.radio-group-has-invalid-text {\n  .radio-group-invalid-text {\n    display: flex;\n    margin-left: -2px;\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-invalid-text-color);\n    margin-top: var(--gr-spacing-xxx-small);\n    font-size: var(--gr-form-element-invalid-text-font-size-medium);\n    min-height: 1.875rem;\n\n    .icon {\n      margin-top: var(--gr-spacing-xxx-small);\n      margin-right: var(--gr-spacing-xx-small);\n\n      svg {\n        width: 1.4em;\n        height: 1.4em;\n      }\n    }\n  }\n}\n","import { Component, h, Prop, Event, EventEmitter, Watch, Element, Listen, State, Host } from '@stencil/core';\nimport { renderHiddenInput } from '../../utils/helpers';\nimport { hasSlot } from '../../utils/slot';\nimport { RadioGroupChangeEventDetail } from './radio-group-interface';\n\nlet id = 0;\n\n/**\n * @slot - The default slot where radio controls are placed.\n * @slot label - The radio group label. Required for proper accessibility. Alternatively, you can use the label prop.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n */\n@Component({\n  tag: 'gr-radio-group',\n  styleUrl: 'radio-group.scss',\n  shadow: true,\n})\nexport class RadioGroup {\n  private inputId = `radio-group-${id++}`;\n  private invalidTextId = `radio-group-invalid-text-${id++}`;\n\n  @Element() el!: HTMLElement;\n\n  @State() hasLabelSlot = false;\n  @State() hasInvalidTextSlot = false;\n\n  /** If `true`, the radios can be deselected. */\n  @Prop() allowEmptySelection = false;\n\n  /** The radio group label. Required for proper accessibility. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Set to true to display a required indicator, adds an asterisk to label */\n  @Prop() requiredIndicator = false;\n\n  /** The radio group's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text. */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** Render the radios horizontal instead of vertical */\n  @Prop({ reflect: true }) horizontal = false;\n\n  /** The name of the control, which is submitted with the form data. */\n  @Prop() name: string = this.inputId;\n\n  /** the value of the radio group. */\n  @Prop({ mutable: true }) value?: any | null;\n\n  @Watch('value')\n  valueChanged(value: any | undefined) {\n    this.setRadioTabindex(value);\n\n    this.grChange.emit({ value });\n  }\n\n  @Watch('label')\n  @Watch('invalidText')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  /** Emitted when the value has changed. */\n  @Event({ eventName: 'gr-change' }) grChange!: EventEmitter<RadioGroupChangeEventDetail>;\n\n  connectedCallback() {\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  componentDidLoad() {\n    this.setRadioTabindex(this.value);\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  private setRadioTabindex = (value: any | undefined) => {\n    const radios = this.getRadios();\n\n    // Get the first radio that is not disabled and the checked one\n    const first = radios.find(radio => !radio.disabled);\n    const checked = radios.find(radio => radio.value === value && !radio.disabled);\n\n    if (!first && !checked) {\n      return;\n    }\n\n    // If an enabled checked radio exists, set it to be the focusable radio\n    // otherwise we default to focus the first radio\n    const focusable = checked || first;\n\n    for (const radio of radios) {\n      const tabindex = radio === focusable ? 0 : -1;\n      radio.setButtonTabindex(tabindex);\n    }\n  };\n\n  private getRadios(): HTMLGrRadioElement[] {\n    return Array.from(this.el.querySelectorAll('gr-radio'));\n  }\n\n  private onClick = (ev: Event) => {\n    ev.preventDefault();\n\n    const selectedRadio = ev.target && (ev.target as HTMLElement).closest('gr-radio');\n    if (selectedRadio) {\n      const currentValue = this.value;\n      const newValue = selectedRadio.value;\n      if (newValue !== currentValue) {\n        this.value = newValue;\n      } else if (this.allowEmptySelection) {\n        this.value = undefined;\n      }\n    }\n  };\n\n  @Listen('keydown', { target: 'document' })\n  onKeydown(ev: any) {\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    }\n\n    // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n    const radios = this.getRadios().filter(radio => !radio.disabled);\n\n    // Only move the radio if the current focus is in the radio group\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex(radio => radio === ev.target);\n      const current = radios[index];\n\n      let next;\n\n      // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\n        next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n\n        // Prevent browsers from scrolling\n        ev.preventDefault();\n      }\n\n      // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\n        next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n\n        // Prevent browsers from scrolling\n        ev.preventDefault();\n      }\n\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n        this.value = next.value;\n      }\n\n      // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n      if (['Space'].includes(ev.code)) {\n        this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n\n        // Prevent browsers from jumping\n        // to the bottom of the screen\n        ev.preventDefault();\n      }\n    }\n  }\n\n  handleSlotChange() {\n    this.hasLabelSlot = hasSlot(this.el, 'label');\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.value, false);\n\n    const hasLabel = this.label ? true : this.hasLabelSlot;\n    const hasInvalidText = this.invalidText ? true : this.hasInvalidTextSlot;\n    const showInvalidText = this.invalid ? true : false;\n\n    return (\n      <Host onClick={this.onClick}>\n        <fieldset\n          class={{\n            'radio-group': true,\n            'radio-group-horizontal': this.horizontal,\n            'radio-group-invalid': this.invalid,\n            'radio-group-has-label': hasLabel,\n            'radio-group-has-invalid-text': hasInvalidText,\n          }}\n          role=\"radiogroup\"\n          aria-invalid={this.invalid}\n          aria-required={this.requiredIndicator ? 'true' : 'false'}\n          aria-describedby={this.invalid ? this.invalidTextId : ''}\n        >\n          <legend class=\"radio-group-label\" aria-hidden={hasLabel ? 'false' : 'true'}>\n            <slot name=\"label\">{this.label}</slot>\n            {this.requiredIndicator && (\n              <span class=\"asterisk\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 1200 1200\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M489.838 29.354v443.603L68.032 335.894 0 545.285l421.829 137.086-260.743 358.876 178.219 129.398L600.048 811.84l260.673 358.806 178.146-129.398-260.766-358.783L1200 545.379l-68.032-209.403-421.899 137.07V29.443H489.84l-.002-.089z\"\n                  />\n                </svg>\n              </span>\n            )}\n          </legend>\n          <div class=\"content\">\n            <slot></slot>\n          </div>\n          {showInvalidText && (\n            <div\n              id={this.invalidTextId}\n              class=\"radio-group-invalid-text\"\n              aria-hidden={hasInvalidText ? 'false' : 'true'}\n            >\n              <div class=\"icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                  <title>Alert Circle</title>\n                  <path\n                    d=\"M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48Zm0,319.91a20,20,0,1,1,20-20A20,20,0,0,1,256,367.91Zm21.72-201.15-5.74,122a16,16,0,0,1-32,0l-5.74-121.94v-.05a21.74,21.74,0,1,1,43.44,0Z\"\n                    fill=\"currentColor\"\n                  />\n                </svg>\n              </div>\n              <div class=\"text\">\n                <slot name=\"invalid-text\">{this.invalidText}</slot>\n              </div>\n            </div>\n          )}\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"]}