{"file":"gr-radio.gr-radio-group.entry.cjs.js","mappings":";;;;;;;;;;;AAAA,MAAM,QAAQ,GAAG,4vGAA4vG;;ACG7wG,IAAIA,IAAE,GAAG,CAAC,CAAC;MAUE,KAAK;;;;;IACR,YAAO,GAAG,SAAS,EAAEA,IAAE,EAAE,CAAC;IAC1B,YAAO,GAAG,eAAeA,IAAE,EAAE,CAAC;IAE9B,eAAU,GAAmC,IAAI,CAAC;IAClD,wBAAmB,GAAyB,EAAE,CAAC;IAgF/C,gBAAW,GAAG;MACpB,IAAI,IAAI,CAAC,UAAU,EAAE;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;OACrD;KACF,CAAC;oBAhFkB,KAAK;;oBAMN,KAAK;mBAG0B,KAAK;qBAGW,QAAQ;0BAMhD,CAAC,CAAC;;;EAU5B,MAAM,iBAAiB,CAAC,KAAa;IACnC,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;GAC7B;EAED,iBAAiB;IACf,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE/C,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;MAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;KAC3B;IACD,MAAM,UAAU,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACzE,IAAI,UAAU,EAAE;MACd,IAAI,CAAC,WAAW,EAAE,CAAC;MACnBC,wBAAgB,CAAC,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;;MAG5DA,wBAAgB,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC/D;GACF;EAED,iBAAiB;IACf,IAAI,CAAC,mBAAmB,GAAGC,yBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;GACvE;EAED,oBAAoB;IAClB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACnC,IAAI,UAAU,EAAE;MACdC,2BAAmB,CAAC,UAAU,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;;MAG/DA,2BAAmB,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;MACjE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;KACxB;GACF;;EAID,MAAM,QAAQ,CAAC,OAAsB;IACnC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;GAC3B;;EAID,MAAM,WAAW;IACf,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;GACnB;EAQD,UAAU;IACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;GACpB;EAED,WAAW;IACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrB,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;GACrB;EAED,MAAM;IACJ,MAAM,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC;QAC9D,EAAE,YAAY,EAAE,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,EAAE;QACxD,EAAE,iBAAiB,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;IAExC,QACEC,QAACC,UAAI,kBACH,KAAK,EAAE;QACL,gBAAgB,EAAE,IAAI,CAAC,QAAQ;OAChC,EACD,QAAQ,EAAE,IAAI,CAAC,cAAc,EAC7B,IAAI,EAAC,OAAO,EACZ,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,OAAO,EAAE,IAAI,CAAC,WAAW,kBACX,GAAG,IAAI,CAAC,OAAO,EAAE,iBAClB,IAAI,CAAC,QAAQ,GAAG,MAAM,GAAG,IAAI,IACtC,mBAAmB,GAEvBD,mBACE,KAAK,EAAE;QACL,OAAO,EAAE,IAAI;QACb,eAAe,EAAE,IAAI,CAAC,OAAO;QAC7B,gBAAgB,EAAE,IAAI,CAAC,QAAQ;QAC/B,eAAe,EAAE,IAAI,CAAC,QAAQ;QAC9B,CAAC,SAAS,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI;OAClC,EACD,OAAO,EAAE,IAAI,CAAC,OAAO,IAErBA,kBAAM,KAAK,EAAC,eAAe,IACzBA,kBAAM,KAAK,EAAC,YAAY,IACtBA,iBAAK,IAAI,EAAC,KAAK,iBAAa,MAAM,EAAC,OAAO,EAAC,WAAW,IACpDA,eAAG,MAAM,EAAC,MAAM,kBAAc,GAAG,EAAC,IAAI,EAAC,MAAM,eAAW,SAAS,IAC/DA,eAAG,IAAI,EAAC,cAAc,IACpBA,oBAAQ,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,YAAY,GAAU,CAC5C,CACF,CACA,CACD,EAEPA,mBACE,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,EAC5B,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,IAAI,EAAC,OAAO,EACZ,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAC,IAAI,GACb,CACG,EAEPA,kBAAM,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAC,aAAa,IACzCA,qBAAQ,CACH,CACD,CACH,EACP;GACH;;;;;AC1KH,MAAM,aAAa,GAAG,gxDAAgxD;;ACKtyD,IAAI,EAAE,GAAG,CAAC,CAAC;MAYE,UAAU;;;;IACb,YAAO,GAAG,eAAe,EAAE,EAAE,EAAE,CAAC;IAChC,kBAAa,GAAG,4BAA4B,EAAE,EAAE,EAAE,CAAC;IAiEnD,qBAAgB,GAAG,CAAC,KAAsB;MAChD,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;;MAGhC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;MACpD,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;MAE/E,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;QACtB,OAAO;OACR;;;MAID,MAAM,SAAS,GAAG,OAAO,IAAI,KAAK,CAAC;MAEnC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;QAC1B,MAAM,QAAQ,GAAG,KAAK,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,KAAK,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;OACnC;KACF,CAAC;IAMM,YAAO,GAAG,CAAC,EAAS;MAC1B,EAAE,CAAC,cAAc,EAAE,CAAC;MAEpB,MAAM,aAAa,GAAG,EAAE,CAAC,MAAM,IAAK,EAAE,CAAC,MAAsB,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;MAClF,IAAI,aAAa,EAAE;QACjB,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC;QACrC,IAAI,QAAQ,KAAK,YAAY,EAAE;UAC7B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;SACvB;aAAM,IAAI,IAAI,CAAC,mBAAmB,EAAE;UACnC,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;SACxB;OACF;KACF,CAAC;wBAnGsB,KAAK;8BACC,KAAK;+BAGL,KAAK;iBAGnB,EAAE;6BAGU,KAAK;uBAGX,EAAE;mBAGW,KAAK;sBAGF,KAAK;gBAGpB,IAAI,CAAC,OAAO;;;EAMnC,YAAY,CAAC,KAAsB;IACjC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAE7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;GAC/B;EAID,iBAAiB;IACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;GACzB;EAKD,iBAAiB;IACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEzD,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAC1E;EAED,iBAAiB;IACf,IAAI,CAAC,gBAAgB,EAAE,CAAC;GACzB;EAED,gBAAgB;IACd,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACnC;EAED,oBAAoB;IAClB,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;GAC7E;EAuBO,SAAS;IACf,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;GACzD;EAkBD,SAAS,CAAC,EAAO;IACf,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;MAC7C,OAAO;KACR;;;IAID,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;IAGjE,IAAI,EAAE,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;MAC3C,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC;MAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;MAE9B,IAAI,IAAI,CAAC;;;MAIT,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QACjD,IAAI,GAAG,KAAK,KAAK,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;;QAGnE,EAAE,CAAC,cAAc,EAAE,CAAC;OACrB;;;MAID,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QAC9C,IAAI,GAAG,KAAK,KAAK,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;;QAGnE,EAAE,CAAC,cAAc,EAAE,CAAC;OACrB;MAED,IAAI,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;OACzB;;;MAID,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;QAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,GAAG,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC;;;QAI9F,EAAE,CAAC,cAAc,EAAE,CAAC;OACrB;KACF;GACF;EAED,gBAAgB;IACd,IAAI,CAAC,YAAY,GAAGE,YAAO,CAAC,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;IAC9C,IAAI,CAAC,kBAAkB,GAAGA,YAAO,CAAC,IAAI,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;GAC5D;EAED,MAAM;IACJC,yBAAiB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC;IACvD,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC;IACzE,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC;IAEpD,QACEH,QAACC,UAAI,IAAC,OAAO,EAAE,IAAI,CAAC,OAAO,IACzBD,sBACE,KAAK,EAAE;QACL,aAAa,EAAE,IAAI;QACnB,wBAAwB,EAAE,IAAI,CAAC,UAAU;QACzC,qBAAqB,EAAE,IAAI,CAAC,OAAO;QACnC,uBAAuB,EAAE,QAAQ;QACjC,8BAA8B,EAAE,cAAc;OAC/C,EACD,IAAI,EAAC,YAAY,kBACH,IAAI,CAAC,OAAO,mBACX,IAAI,CAAC,iBAAiB,GAAG,MAAM,GAAG,OAAO,sBACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,GAAG,EAAE,IAExDA,oBAAQ,KAAK,EAAC,mBAAmB,iBAAc,QAAQ,GAAG,OAAO,GAAG,MAAM,IACxEA,kBAAM,IAAI,EAAC,OAAO,IAAE,IAAI,CAAC,KAAK,CAAQ,EACrC,IAAI,CAAC,iBAAiB,KACrBA,kBAAM,KAAK,EAAC,UAAU,IACpBA,iBAAK,IAAI,EAAC,KAAK,iBAAa,MAAM,EAAC,OAAO,EAAC,eAAe,IACxDA,kBACE,IAAI,EAAC,cAAc,EACnB,CAAC,EAAC,uOAAuO,GACzO,CACE,CACD,CACR,CACM,EACTA,iBAAK,KAAK,EAAC,SAAS,IAClBA,qBAAa,CACT,EACL,eAAe,KACdA,iBACE,EAAE,EAAE,IAAI,CAAC,aAAa,EACtB,KAAK,EAAC,0BAA0B,iBACnB,cAAc,GAAG,OAAO,GAAG,MAAM,IAE9CA,iBAAK,KAAK,EAAC,MAAM,IACfA,iBAAK,IAAI,EAAC,KAAK,iBAAa,MAAM,EAAC,OAAO,EAAC,aAAa,IACtDA,sCAA2B,EAC3BA,kBACE,CAAC,EAAC,iOAAiO,EACnO,IAAI,EAAC,cAAc,GACnB,CACE,CACF,EACNA,iBAAK,KAAK,EAAC,MAAM,IACfA,kBAAM,IAAI,EAAC,cAAc,IAAE,IAAI,CAAC,WAAW,CAAQ,CAC/C,CACF,CACP,CACQ,CACN,EACP;GACH;;;;;;;;;;;;;","names":["id","addEventListener","inheritAttributes","removeEventListener","h","Host","hasSlot","renderHiddenInput"],"sources":["./src/components/radio/radio.scss?tag=gr-radio&encapsulation=shadow","./src/components/radio/radio.tsx","./src/components/radio-group/radio-group.scss?tag=gr-radio-group&encapsulation=shadow","./src/components/radio-group/radio-group.tsx"],"sourcesContent":["@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --label-color: Color of the label\n   *\n   * @prop --control-size: Size of the control\n   *\n   * @prop --control-border-color: Border color of the control\n   * @prop --control-background-color: Background color of the control\n   *\n   * @prop --control-border-color-hover: Border color of the control on hover\n   * @prop --control-background-color-hover: Background color of the control on hover\n   *\n   * @prop --control-border-color-focus: Border color of the control on focus\n   * @prop --control-background-color-focus: Background color of the control on focus\n   *\n   * @prop --control-color-checked: Color of the control when checked (the small circle)\n   * @prop --control-border-color-checked: Border color of the control when checked\n   * @prop --control-background-color-checked: Background color of the control when checked\n   *\n   * @prop --control-border-color-checked-hover: Border color of the control when checked on hover\n   * @prop --control-background-color-checked-hover: Background color of the control when checked on hover\n   *\n   * @prop --control-border-color-checked-focus: Border color of the control when checked on focus\n   * @prop --control-background-color-checked-focus: Background color of the control when checked on focus\n   */\n  --label-color: var(--gr-color-dark-tint);\n  --label-margin-top-adjustment: -7px;\n  --label-margin-bottom-adjustment: -4px;\n\n  --control-size: var(--gr-toggle-size);\n\n  --control-border-color: var(--gr-color-light-shade);\n  --control-background-color: var(--gr-color-white);\n\n  --control-border-color-hover: var(--gr-color-medium);\n  --control-background-color-hover: var(--gr-color-white);\n\n  --control-border-color-focus: var(--gr-color-medium);\n  --control-background-color-focus: var(--gr-color-medium);\n\n  --control-color-checked: var(--gr-color-white);\n  --control-border-color-checked: var(--gr-color-primary);\n  --control-background-color-checked: var(--gr-color-primary);\n\n  --control-border-color-checked-hover: var(--gr-color-primary-shade);\n  --control-background-color-checked-hover: var(--gr-color-primary-shade);\n\n  --control-border-color-checked-focus: var(--gr-color-primary-shade);\n  --control-background-color-checked-focus: var(--gr-color-primary-shade);\n\n  --focus-ring: 0 0 0 var(--gr-focus-ring-width) rgb(var(--gr-color-primary-rgb), 0.33);\n\n  display: inline-block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n// Alignment modifiers\n// --------------------------------------------------\n.radio-top {\n  align-items: flex-start;\n}\n\n.radio-center {\n  align-items: center;\n}\n\n.radio-bottom {\n  align-items: flex-end;\n}\n\n.radio {\n  display: inline-flex;\n  font-family: var(--gr-font-family);\n  font-size: var(--gr-form-element-font-size-medium);\n  font-weight: var(--gr-font-weight-normal);\n  color: var(--label-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.radio-icon {\n  display: inline-flex;\n  width: var(--control-size);\n  height: var(--control-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.radio-control {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--control-size);\n  height: var(--control-size);\n  border: solid 1px var(--control-border-color);\n  border-radius: 50%;\n  background-color: var(--control-background-color);\n  color: transparent;\n  transition: 150ms border-color, 150ms background-color, 150ms color, 150ms box-shadow;\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.radio:not(.radio-checked):not(.radio-disabled) .radio-control:hover {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n}\n\n// Focus\n.radio.radio-focused:not(.radio-checked):not(.radio-disabled) .radio-control {\n  border-color: var(--control-border-color-hover);\n  background-color: var(--control-background-color-hover);\n  box-shadow: var(--focus-ring);\n}\n\n// Checked\n.radio-checked .radio-control {\n  color: var(--control-color-checked);\n  border-color: var(--control-border-color-checked);\n  background-color: var(--control-background-color-checked);\n}\n\n// Checked + hover\n.radio.radio-checked:not(.radio-disabled) .radio-control:hover {\n  border-color: var(--control-border-color-checked-hover);\n  background-color: var(--control-background-color-checked-hover);\n}\n\n// Checked + focus\n.radio.radio-checked:not(.radio-disabled).radio-focused .radio-control {\n  border-color: var(--control-border-color-checked-focus);\n  background-color: var(--control-background-color-checked-focus);\n  box-shadow: var(--focus-ring);\n}\n\n// Disabled\n.radio-disabled {\n  opacity: 0.5;\n}\n\n.radio-label {\n  line-height: var(--gr-line-height-normal);\n  margin-left: 0.5em;\n  user-select: none;\n}\n\n.radio-top .radio-label {\n  margin-top: var(--label-margin-top-adjustment);\n}\n\n.radio-bottom .radio-label {\n  margin-bottom: var(--label-margin-bottom-adjustment);\n}\n\n:host(:focus) {\n  outline: none;\n}\n","import { Component, Host, h, Element, State, Prop, Event, EventEmitter, Method } from '@stencil/core';\nimport { addEventListener, inheritAttributes, removeEventListener } from '../../utils/helpers';\n\nlet id = 0;\n\n/**\n * @slot - The radio's label.\n */\n@Component({\n  tag: 'gr-radio',\n  styleUrl: 'radio.scss',\n  shadow: true,\n})\nexport class Radio {\n  private inputId = `radio-${++id}`;\n  private labelId = `radio-label-${id}`;\n  private input: HTMLInputElement;\n  private radioGroup: HTMLGrRadioGroupElement | null = null;\n  private inheritedAttributes: { [k: string]: any } = {};\n\n  @Element() el: HTMLGrRadioElement;\n\n  @State() hasFocus = false;\n\n  /** The radio's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value: string;\n\n  /** Set to true to disable the radio. */\n  @Prop() disabled = false;\n\n  /** Set to true to draw the radio in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** The radio's alignment attribute. */\n  @Prop({ reflect: true }) alignment: 'top' | 'center' | 'bottom' = 'center';\n\n  /**\n   * The tabindex of the radio button.\n   * @internal\n   */\n  @State() buttonTabindex = -1;\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'gr-blur' }) grBlur: EventEmitter;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'gr-focus' }) grFocus: EventEmitter;\n\n  /** @internal */\n  @Method()\n  async setButtonTabindex(value: number) {\n    this.buttonTabindex = value;\n  }\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n\n    if (this.value === undefined) {\n      this.value = this.inputId;\n    }\n    const radioGroup = (this.radioGroup = this.el.closest('gr-radio-group'));\n    if (radioGroup) {\n      this.updateState();\n      addEventListener(radioGroup, 'gr-change', this.updateState);\n\n      // Needed for the Vue wrappers\n      addEventListener(radioGroup, 'v-gr-change', this.updateState);\n    }\n  }\n\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n\n  disconnectedCallback() {\n    const radioGroup = this.radioGroup;\n    if (radioGroup) {\n      removeEventListener(radioGroup, 'gr-change', this.updateState);\n\n      // Needed for the Vue wrappers\n      removeEventListener(radioGroup, 'v-gr-change', this.updateState);\n      this.radioGroup = null;\n    }\n  }\n\n  /** Sets focus on the radio. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.input.focus(options);\n  }\n\n  /** Removes focus from the radio. */\n  @Method()\n  async removeFocus() {\n    this.input.blur();\n  }\n\n  private updateState = () => {\n    if (this.radioGroup) {\n      this.checked = this.radioGroup.value === this.value;\n    }\n  };\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.grBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.grFocus.emit();\n  }\n\n  render() {\n    const ariaLabelAttributes = this.inheritedAttributes['aria-label']\n      ? { 'aria-label': this.inheritedAttributes['aria-label'] }\n      : { 'aria-labelledby': this.labelId };\n\n    return (\n      <Host\n        class={{\n          'radio-disabled': this.disabled,\n        }}\n        tabindex={this.buttonTabindex}\n        role=\"radio\"\n        onBlur={this.handleBlur}\n        onFocus={this.handleFocus}\n        aria-checked={`${this.checked}`}\n        aria-hidden={this.disabled ? 'true' : null}\n        {...ariaLabelAttributes}\n      >\n        <label\n          class={{\n            'radio': true,\n            'radio-checked': this.checked,\n            'radio-disabled': this.disabled,\n            'radio-focused': this.hasFocus,\n            [`radio-${this.alignment}`]: true,\n          }}\n          htmlFor={this.inputId}\n        >\n          <span class=\"radio-control\">\n            <span class=\"radio-icon\">\n              <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                  <g fill=\"currentColor\">\n                    <circle cx=\"8\" cy=\"8\" r=\"3.42857143\"></circle>\n                  </g>\n                </g>\n              </svg>\n            </span>\n\n            <input\n              ref={el => (this.input = el)}\n              id={this.inputId}\n              type=\"radio\"\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              tabindex=\"-1\"\n            />\n          </span>\n\n          <span id={this.labelId} class=\"radio-label\">\n            <slot />\n          </span>\n        </label>\n      </Host>\n    );\n  }\n}\n","@import '../../themes/graphite.globals';\n\n:host {\n  /**\n   * @prop --margin-between-radios: Margin between the gr-radio children\n   * @prop --margin-between-radios-horizontal: Margin between the gr-radio children when layout is horizontal\n   * @prop --align-radios: Alignment of radio's on cross-axis, an `align-items` Flexbox property\n   */\n  --margin-between-radios: var(--gr-spacing-xx-small);\n  --margin-between-radios-horizontal: var(--gr-spacing-medium);\n  --align-radios: flex-start;\n\n  display: block;\n  box-sizing: border-box;\n\n  & *,\n  & *:before,\n  & *:after {\n    box-sizing: inherit;\n  }\n}\n\n.radio-group {\n  margin: 0;\n  padding: 0;\n  border: none;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  align-items: var(--align-radios);\n  gap: var(--margin-between-radios);\n}\n\n.radio-group-horizontal .content {\n  flex-direction: row;\n  gap: var(--margin-between-radios-horizontal);\n}\n\n.radio-group-label {\n  display: none;\n}\n\n.radio-group-has-label {\n  .radio-group-label {\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-label-color);\n    font-size: var(--gr-form-element-label-font-size-medium);\n\n    margin: 0;\n    padding: 0;\n    display: flex;\n\n    margin-bottom: var(--gr-spacing-xxx-small);\n  }\n\n  .radio-group-label .asterisk {\n    margin-left: var(--gr-spacing-x-small);\n    color: var(--gr-color-medium);\n\n    svg {\n      width: 0.6em;\n      height: 0.6em;\n      margin-bottom: var(--gr-spacing-xxx-small);\n    }\n  }\n}\n\n.radio-group-invalid {\n  ::slotted(gr-radio) {\n    --control-border-color: var(--gr-form-element-invalid-text-color);\n    --control-background-color-checked: var(--gr-form-element-invalid-text-color);\n  }\n}\n\n// Invalid text\n.radio-group-invalid-text {\n  display: none;\n}\n\n.radio-group-has-invalid-text {\n  .radio-group-invalid-text {\n    display: flex;\n    margin-left: -2px;\n    line-height: var(--gr-line-height-normal);\n    color: var(--gr-form-element-invalid-text-color);\n    margin-top: var(--gr-spacing-xxx-small);\n    font-size: var(--gr-form-element-invalid-text-font-size-medium);\n    min-height: 1.875rem;\n\n    .icon {\n      margin-top: var(--gr-spacing-xxx-small);\n      margin-right: var(--gr-spacing-xx-small);\n\n      svg {\n        width: 1.4em;\n        height: 1.4em;\n      }\n    }\n  }\n}\n","import { Component, h, Prop, Event, EventEmitter, Watch, Element, Listen, State, Host } from '@stencil/core';\nimport { renderHiddenInput } from '../../utils/helpers';\nimport { hasSlot } from '../../utils/slot';\nimport { RadioGroupChangeEventDetail } from './radio-group-interface';\n\nlet id = 0;\n\n/**\n * @slot - The default slot where radio controls are placed.\n * @slot label - The radio group label. Required for proper accessibility. Alternatively, you can use the label prop.\n * @slot invalid-text - Invalid text tells a user how to fix the error. Alternatively, you can use the invalid-text prop.\n */\n@Component({\n  tag: 'gr-radio-group',\n  styleUrl: 'radio-group.scss',\n  shadow: true,\n})\nexport class RadioGroup {\n  private inputId = `radio-group-${id++}`;\n  private invalidTextId = `radio-group-invalid-text-${id++}`;\n\n  @Element() el!: HTMLElement;\n\n  @State() hasLabelSlot = false;\n  @State() hasInvalidTextSlot = false;\n\n  /** If `true`, the radios can be deselected. */\n  @Prop() allowEmptySelection = false;\n\n  /** The radio group label. Required for proper accessibility. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Set to true to display a required indicator, adds an asterisk to label */\n  @Prop() requiredIndicator = false;\n\n  /** The radio group's invalid text. Alternatively, you can use the invalid-text slot. */\n  @Prop() invalidText = '';\n\n  /** Set to true to indicate this field is invalid. Will display the invalid text. */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** Render the radios horizontal instead of vertical */\n  @Prop({ reflect: true }) horizontal = false;\n\n  /** The name of the control, which is submitted with the form data. */\n  @Prop() name: string = this.inputId;\n\n  /** the value of the radio group. */\n  @Prop({ mutable: true }) value?: any | null;\n\n  @Watch('value')\n  valueChanged(value: any | undefined) {\n    this.setRadioTabindex(value);\n\n    this.grChange.emit({ value });\n  }\n\n  @Watch('label')\n  @Watch('invalidText')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  /** Emitted when the value has changed. */\n  @Event({ eventName: 'gr-change' }) grChange!: EventEmitter<RadioGroupChangeEventDetail>;\n\n  connectedCallback() {\n    this.handleSlotChange = this.handleSlotChange.bind(this);\n\n    this.el.shadowRoot.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  componentDidLoad() {\n    this.setRadioTabindex(this.value);\n  }\n\n  disconnectedCallback() {\n    this.el.shadowRoot.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  private setRadioTabindex = (value: any | undefined) => {\n    const radios = this.getRadios();\n\n    // Get the first radio that is not disabled and the checked one\n    const first = radios.find(radio => !radio.disabled);\n    const checked = radios.find(radio => radio.value === value && !radio.disabled);\n\n    if (!first && !checked) {\n      return;\n    }\n\n    // If an enabled checked radio exists, set it to be the focusable radio\n    // otherwise we default to focus the first radio\n    const focusable = checked || first;\n\n    for (const radio of radios) {\n      const tabindex = radio === focusable ? 0 : -1;\n      radio.setButtonTabindex(tabindex);\n    }\n  };\n\n  private getRadios(): HTMLGrRadioElement[] {\n    return Array.from(this.el.querySelectorAll('gr-radio'));\n  }\n\n  private onClick = (ev: Event) => {\n    ev.preventDefault();\n\n    const selectedRadio = ev.target && (ev.target as HTMLElement).closest('gr-radio');\n    if (selectedRadio) {\n      const currentValue = this.value;\n      const newValue = selectedRadio.value;\n      if (newValue !== currentValue) {\n        this.value = newValue;\n      } else if (this.allowEmptySelection) {\n        this.value = undefined;\n      }\n    }\n  };\n\n  @Listen('keydown', { target: 'document' })\n  onKeydown(ev: any) {\n    if (ev.target && !this.el.contains(ev.target)) {\n      return;\n    }\n\n    // Get all radios inside of the radio group and then\n    // filter out disabled radios since we need to skip those\n    const radios = this.getRadios().filter(radio => !radio.disabled);\n\n    // Only move the radio if the current focus is in the radio group\n    if (ev.target && radios.includes(ev.target)) {\n      const index = radios.findIndex(radio => radio === ev.target);\n      const current = radios[index];\n\n      let next;\n\n      // If hitting arrow down or arrow right, move to the next radio\n      // If we're on the last radio, move to the first radio\n      if (['ArrowDown', 'ArrowRight'].includes(ev.code)) {\n        next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n\n        // Prevent browsers from scrolling\n        ev.preventDefault();\n      }\n\n      // If hitting arrow up or arrow left, move to the previous radio\n      // If we're on the first radio, move to the last radio\n      if (['ArrowUp', 'ArrowLeft'].includes(ev.code)) {\n        next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n\n        // Prevent browsers from scrolling\n        ev.preventDefault();\n      }\n\n      if (next && radios.includes(next)) {\n        next.setFocus(ev);\n        this.value = next.value;\n      }\n\n      // Update the radio group value when a user presses the\n      // space bar on top of a selected radio\n      if (['Space'].includes(ev.code)) {\n        this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n\n        // Prevent browsers from jumping\n        // to the bottom of the screen\n        ev.preventDefault();\n      }\n    }\n  }\n\n  handleSlotChange() {\n    this.hasLabelSlot = hasSlot(this.el, 'label');\n    this.hasInvalidTextSlot = hasSlot(this.el, 'invalid-text');\n  }\n\n  render() {\n    renderHiddenInput(this.el, this.name, this.value, false);\n\n    const hasLabel = this.label ? true : this.hasLabelSlot;\n    const hasInvalidText = this.invalidText ? true : this.hasInvalidTextSlot;\n    const showInvalidText = this.invalid ? true : false;\n\n    return (\n      <Host onClick={this.onClick}>\n        <fieldset\n          class={{\n            'radio-group': true,\n            'radio-group-horizontal': this.horizontal,\n            'radio-group-invalid': this.invalid,\n            'radio-group-has-label': hasLabel,\n            'radio-group-has-invalid-text': hasInvalidText,\n          }}\n          role=\"radiogroup\"\n          aria-invalid={this.invalid}\n          aria-required={this.requiredIndicator ? 'true' : 'false'}\n          aria-describedby={this.invalid ? this.invalidTextId : ''}\n        >\n          <legend class=\"radio-group-label\" aria-hidden={hasLabel ? 'false' : 'true'}>\n            <slot name=\"label\">{this.label}</slot>\n            {this.requiredIndicator && (\n              <span class=\"asterisk\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 1200 1200\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M489.838 29.354v443.603L68.032 335.894 0 545.285l421.829 137.086-260.743 358.876 178.219 129.398L600.048 811.84l260.673 358.806 178.146-129.398-260.766-358.783L1200 545.379l-68.032-209.403-421.899 137.07V29.443H489.84l-.002-.089z\"\n                  />\n                </svg>\n              </span>\n            )}\n          </legend>\n          <div class=\"content\">\n            <slot></slot>\n          </div>\n          {showInvalidText && (\n            <div\n              id={this.invalidTextId}\n              class=\"radio-group-invalid-text\"\n              aria-hidden={hasInvalidText ? 'false' : 'true'}\n            >\n              <div class=\"icon\">\n                <svg role=\"img\" aria-hidden=\"true\" viewBox=\"0 0 512 512\">\n                  <title>Alert Circle</title>\n                  <path\n                    d=\"M256,48C141.31,48,48,141.31,48,256s93.31,208,208,208,208-93.31,208-208S370.69,48,256,48Zm0,319.91a20,20,0,1,1,20-20A20,20,0,0,1,256,367.91Zm21.72-201.15-5.74,122a16,16,0,0,1-32,0l-5.74-121.94v-.05a21.74,21.74,0,1,1,43.44,0Z\"\n                    fill=\"currentColor\"\n                  />\n                </svg>\n              </div>\n              <div class=\"text\">\n                <slot name=\"invalid-text\">{this.invalidText}</slot>\n              </div>\n            </div>\n          )}\n        </fieldset>\n      </Host>\n    );\n  }\n}\n"],"version":3}